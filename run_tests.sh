#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ AGB SERVICE"
echo "=================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend —Ç–µ—Å—Ç–æ–≤
run_backend_tests() {
    print_status "–ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps | grep -q "agregator_backend"; then
        print_warning "Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d agregator-backend
        sleep 10
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    docker exec agregator_backend pip install pytest pytest-asyncio pytest-cov httpx factory-boy faker
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print_status "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤..."
    docker exec agregator_backend python -m pytest tests/unit/ -v --tb=short
    
    if [ $? -eq 0 ]; then
        print_success "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
    
    print_status "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    docker exec agregator_backend python -m pytest tests/integration/ -v --tb=short
    
    if [ $? -eq 0 ]; then
        print_success "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
    
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞..."
    docker exec agregator_backend python -m pytest tests/ --cov=backend --cov-report=html --cov-report=term
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend —Ç–µ—Å—Ç–æ–≤
run_frontend_tests() {
    print_status "–ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps | grep -q "agregator_frontend"; then
        print_warning "Frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d agregator-frontend
        sleep 10
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print_status "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ frontend —Ç–µ—Å—Ç–æ–≤..."
    docker exec agregator_frontend npm test -- --coverage --watchAll=false --passWithNoTests
    
    if [ $? -eq 0 ]; then
        print_success "Frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "Frontend —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
run_all_tests() {
    print_status "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    BACKEND_SUCCESS=true
    FRONTEND_SUCCESS=true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend —Ç–µ—Å—Ç—ã
    if ! run_backend_tests; then
        BACKEND_SUCCESS=false
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º frontend —Ç–µ—Å—Ç—ã
    if ! run_frontend_tests; then
        FRONTEND_SUCCESS=false
    fi
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo ""
    echo "=================================="
    echo "üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "=================================="
    
    if [ "$BACKEND_SUCCESS" = true ]; then
        print_success "Backend —Ç–µ—Å—Ç—ã: –ü–†–û–ô–î–ï–ù–´"
    else
        print_error "Backend —Ç–µ—Å—Ç—ã: –ü–†–û–í–ê–õ–ï–ù–´"
    fi
    
    if [ "$FRONTEND_SUCCESS" = true ]; then
        print_success "Frontend —Ç–µ—Å—Ç—ã: –ü–†–û–ô–î–ï–ù–´"
    else
        print_error "Frontend —Ç–µ—Å—Ç—ã: –ü–†–û–í–ê–õ–ï–ù–´"
    fi
    
    if [ "$BACKEND_SUCCESS" = true ] && [ "$FRONTEND_SUCCESS" = true ]; then
        print_success "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
        return 0
    else
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å! ‚ùå"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
generate_coverage_report() {
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞..."
    
    # Backend –ø–æ–∫—Ä—ã—Ç–∏–µ
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è backend..."
    docker exec agregator_backend python -m pytest tests/ --cov=backend --cov-report=html --cov-report=term
    
    # Frontend –ø–æ–∫—Ä—ã—Ç–∏–µ
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è frontend..."
    docker exec agregator_frontend npm run test:coverage
    
    print_success "–û—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:"
    print_status "- Backend: backend/htmlcov/index.html"
    print_status "- Frontend: frontend/coverage/lcov-report/index.html"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
cleanup_test_data() {
    print_status "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    docker exec agregator_backend rm -f test.db
    
    print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-all}" in
    "backend")
        run_backend_tests
        ;;
    "frontend")
        run_frontend_tests
        ;;
    "coverage")
        generate_coverage_report
        ;;
    "cleanup")
        cleanup_test_data
        ;;
    "all")
        run_all_tests
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backend|frontend|coverage|cleanup|all]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  backend   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã"
        echo "  frontend  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã"
        echo "  coverage  - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞"
        echo "  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
        echo "  all       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        exit 1
        ;;
esac
