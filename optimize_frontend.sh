#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ frontend bundle

echo "üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è frontend bundle"
echo "=============================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ bundle
analyze_bundle() {
    print_status "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ bundle..."
    
    if ! docker ps | grep -q "agregator_frontend"; then
        print_warning "Frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d agregator-frontend
        sleep 10
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bundle analyzer
    docker exec agregator_frontend npm install --save-dev webpack-bundle-analyzer
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
    docker exec agregator_frontend npm run build
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º bundle
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ bundle..."
    docker exec agregator_frontend npx webpack-bundle-analyzer build/static/js/*.js --mode static --report build/bundle-report.html --no-open
    
    print_success "–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ bundle —Å–æ–∑–¥–∞–Ω: build/bundle-report.html"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
optimize_images() {
    print_status "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    docker exec agregator_frontend npm install --save-dev imagemin imagemin-mozjpeg imagemin-pngquant imagemin-svgo
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cat > frontend/optimize-images.js << 'EOF'
const imagemin = require('imagemin');
const imageminMozjpeg = require('imagemin-mozjpeg');
const imageminPngquant = require('imagemin-pngquant');
const imageminSvgo = require('imagemin-svgo');

(async () => {
  const files = await imagemin(['src/**/*.{jpg,jpeg,png,svg}'], {
    destination: 'src/optimized',
    plugins: [
      imageminMozjpeg({ quality: 80 }),
      imageminPngquant({ quality: [0.6, 0.8] }),
      imageminSvgo({
        plugins: [
          { name: 'removeViewBox', active: false },
          { name: 'removeDimensions', active: true }
        ]
      })
    ]
  });
  
  console.log('Optimized images:', files.length);
})();
EOF
    
    docker exec agregator_frontend node optimize-images.js
    
    print_success "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è tree shaking
optimize_tree_shaking() {
    print_status "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è tree shaking..."
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webpack –∫–æ–Ω—Ñ–∏–≥
    cat > frontend/webpack.config.optimized.js << 'EOF'
const path = require('path');

module.exports = {
  mode: 'production',
  entry: './src/index.tsx',
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'static/js/[name].[contenthash:8].js',
    chunkFilename: 'static/js/[name].[contenthash:8].chunk.js',
    clean: true,
  },
  optimization: {
    usedExports: true,
    sideEffects: false,
    splitChunks: {
      chunks: 'all',
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all',
        },
        common: {
          name: 'common',
          minChunks: 2,
          chunks: 'all',
          enforce: true,
        },
      },
    },
    runtimeChunk: {
      name: 'runtime',
    },
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
    alias: {
      '@': path.resolve(__dirname, 'src'),
    },
  },
};
EOF
    
    print_success "Tree shaking –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è code splitting
optimize_code_splitting() {
    print_status "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è code splitting..."
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è lazy loading
    cat > frontend/src/components/LazyComponent.tsx << 'EOF'
import React, { Suspense, lazy } from 'react';
import { CircularProgress, Box } from '@mui/material';

const LazyWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <Suspense fallback={
    <Box display="flex" justifyContent="center" alignItems="center" minHeight="200px">
      <CircularProgress />
    </Box>
  }>
    {children}
  </Suspense>
);

export const LazyCustomerCabinet = lazy(() => import('../pages/CustomerCabinetPage'));
export const LazyManagerDashboard = lazy(() => import('../pages/ManagerDashboardPage'));
export const LazySecurityVerification = lazy(() => import('../pages/SecurityVerificationPage'));
export const LazyHRDocuments = lazy(() => import('../pages/HRDocumentsPage'));
export const LazyTelegramBot = lazy(() => import('../pages/TelegramBotPage'));

export { LazyWrapper };
EOF
    
    print_success "Code splitting –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è
optimize_compression() {
    print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∂–∞—Ç–∏—è..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
    cat > frontend/nginx-optimized.conf << 'EOF'
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è nginx –¥–ª—è —Å–∂–∞—Ç–∏—è
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_proxied any;
gzip_comp_level 9;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml
    application/x-font-ttf
    application/vnd.ms-fontobject
    font/opentype;

# Brotli —Å–∂–∞—Ç–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
brotli on;
brotli_comp_level 6;
brotli_types
    text/plain
    text/css
    application/json
    application/javascript
    text/xml
    application/xml
    application/xml+rss
    text/javascript;

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header Vary "Accept-Encoding";
}
EOF
    
    print_success "–°–∂–∞—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è production build
create_production_build() {
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ production build..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    docker exec agregator_frontend sh -c 'export GENERATE_SOURCEMAP=false && export INLINE_RUNTIME_CHUNK=false && npm run build'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä build
    BUILD_SIZE=$(docker exec agregator_frontend du -sh build/ | cut -f1)
    print_success "Production build —Å–æ–∑–¥–∞–Ω. –†–∞–∑–º–µ—Ä: $BUILD_SIZE"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    docker exec agregator_frontend find build/ -name "*.js" -exec ls -lh {} \; | head -10
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_optimization_report() {
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    mkdir -p reports/optimization
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    docker exec agregator_frontend find build/ -type f -exec ls -lh {} \; > reports/optimization/file-sizes.txt
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º bundle
    docker exec agregator_frontend npx webpack-bundle-analyzer build/static/js/*.js --mode static --report reports/optimization/bundle-analysis.html --no-open
    
    print_success "–û—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ reports/optimization/"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
run_full_optimization() {
    print_status "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ frontend bundle..."
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    analyze_bundle
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
    optimize_images
    optimize_tree_shaking
    optimize_code_splitting
    optimize_compression
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π build
    create_production_build
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_optimization_report
    
    print_success "–ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-all}" in
    "analyze")
        analyze_bundle
        ;;
    "images")
        optimize_images
        ;;
    "tree-shaking")
        optimize_tree_shaking
        ;;
    "code-splitting")
        optimize_code_splitting
        ;;
    "compression")
        optimize_compression
        ;;
    "build")
        create_production_build
        ;;
    "report")
        generate_optimization_report
        ;;
    "all")
        run_full_optimization
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [analyze|images|tree-shaking|code-splitting|compression|build|report|all]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  analyze         - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ bundle"
        echo "  images          - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
        echo "  tree-shaking    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è tree shaking"
        echo "  code-splitting  - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è code splitting"
        echo "  compression     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∂–∞—Ç–∏—è"
        echo "  build           - –°–æ–∑–¥–∞–Ω–∏–µ production build"
        echo "  report          - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        echo "  all             - –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        exit 1
        ;;
esac
