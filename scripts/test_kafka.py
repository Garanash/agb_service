#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from kafka import kafka_producer
from kafka.kafka_events import (
    RequestCreatedEvent, WorkflowContractorAssignedEvent,
    NotificationTelegramSentEvent, AuditUserActionEvent
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_request_created_event():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∑–∞—è–≤–∫–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
    
    event = RequestCreatedEvent(
        request_id=12345,
        customer_id=67890,
        title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç",
        description="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        urgency="high",
        region="–ú–æ—Å–∫–≤–∞",
        city="–ú–æ—Å–∫–≤–∞",
        address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
        equipment_type="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
        priority="high"
    )
    
    success = kafka_producer.publish_event("request-events", event)
    
    if success:
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
    
    return success

async def test_contractor_assigned_event():
    """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    event = WorkflowContractorAssignedEvent(
        request_id=12345,
        contractor_id=11111,
        manager_id=22222,
        previous_status="NEW",
        new_status="ASSIGNED",
        assignment_reason="–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
    )
    
    success = kafka_producer.publish_event("workflow-events", event)
    
    if success:
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
    
    return success

async def test_notification_event():
    """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    event = NotificationTelegramSentEvent(
        recipient_id=11111,
        recipient_telegram_username="@test_user",
        message_type="assignment",
        request_id=12345,
        message_content="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏",
        delivery_status="sent",
        telegram_message_id=99999
    )
    
    success = kafka_producer.publish_event("notification-events", event)
    
    if success:
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    return success

async def test_audit_event():
    """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞")
    
    event = AuditUserActionEvent(
        user_id=22222,
        user_role="manager",
        action="assign_contractor",
        resource_type="request",
        resource_id=12345,
        ip_address="192.168.1.100",
        user_agent="Test Agent",
        success=True,
        additional_data={"test": "data"}
    )
    
    success = kafka_producer.publish_event("audit-events", event)
    
    if success:
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ –∞—É–¥–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞")
    
    return success

async def test_batch_events():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π")
    
    events = [
        ("request-events", RequestCreatedEvent(
            request_id=99999,
            customer_id=88888,
            title="–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ 1",
            description="–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏",
            urgency="medium",
            region="–°–ü–±",
            city="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            address="—É–ª. –ü–∞–∫–µ—Ç–Ω–∞—è, 1"
        ), "99999"),
        
        ("request-events", RequestCreatedEvent(
            request_id=99998,
            customer_id=88887,
            title="–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞ 2",
            description="–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏",
            urgency="low",
            region="–ú–æ—Å–∫–≤–∞",
            city="–ú–æ—Å–∫–≤–∞",
            address="—É–ª. –ü–∞–∫–µ—Ç–Ω–∞—è, 2"
        ), "99998"),
        
        ("workflow-events", WorkflowContractorAssignedEvent(
            request_id=99999,
            contractor_id=77777,
            manager_id=66666,
            previous_status="NEW",
            new_status="ASSIGNED",
            assignment_reason="–ü–∞–∫–µ—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"
        ), "99999")
    ]
    
    results = kafka_producer.publish_batch(events)
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {results}")
    
    return results["success"] > 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        tests = [
            test_request_created_event(),
            test_contractor_assigned_event(),
            test_notification_event(),
            test_audit_event(),
            test_batch_events()
        ]
        
        results = await asyncio.gather(*tests, return_exceptions=True)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = sum(1 for result in results if result is True)
        total_tests = len(tests)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count == total_tests:
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º producer
        kafka_producer.close()

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
