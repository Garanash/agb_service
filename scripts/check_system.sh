#!/bin/bash

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —É—Å–ª—É–≥"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    local service=$1
    local url=$2
    local expected_status=$3
    
    echo -n "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $service... "
    
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "$expected_status"; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    else
        echo -e "${RED}‚ùå FAILED${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_docker() {
    local container=$1
    
    echo -n "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $container... "
    
    if docker ps --format "table {{.Names}}" | grep -q "$container"; then
        echo -e "${GREEN}‚úÖ RUNNING${NC}"
        return 0
    else
        echo -e "${RED}‚ùå NOT RUNNING${NC}"
        return 1
    fi
}

echo -e "${BLUE}üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã${NC}"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo -e "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
check_docker "kafka-1"
check_docker "kafka-2" 
check_docker "kafka-3"
check_docker "zookeeper-1"
check_docker "zookeeper-2"
check_docker "zookeeper-3"
check_docker "kafka-ui"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
check_status "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" "http://localhost:8000/health" "200"
check_status "Kafka UI" "http://localhost:8080" "200"
check_status "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è" "http://localhost:8000/docs" "200"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤
echo -e "${YELLOW}üì® –ü—Ä–æ–≤–µ—Ä–∫–∞ Kafka —Ç–æ–ø–∏–∫–æ–≤:${NC}"
if command -v python &> /dev/null; then
    if [ -f "./scripts/monitor_kafka.py" ]; then
        echo "üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Kafka —Ç–æ–ø–∏–∫–æ–≤..."
        python ./scripts/monitor_kafka.py
    else
        echo -e "${RED}‚ùå –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Kafka –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
else
    echo -e "${RED}‚ùå Python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ Kafka
echo -e "${YELLOW}üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤ Kafka:${NC}"
if [ -f "./scripts/test_kafka.py" ]; then
    echo "üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Kafka..."
    python ./scripts/test_kafka.py
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç—ã Kafka –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –¢–µ—Å—Ç—ã Kafka –Ω–µ –ø—Ä–æ—à–ª–∏${NC}"
    fi
else
    echo -e "${RED}‚ùå –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kafka –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
echo -e "${YELLOW}üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:${NC}"

files_to_check=(
    "backend/kafka/kafka_config.py"
    "backend/kafka/kafka_events.py"
    "backend/kafka/kafka_producer.py"
    "backend/kafka/kafka_consumer.py"
    "backend/services/notification_service_consumer.py"
    "backend/kafka_service_main.py"
    "docker-compose.kafka.yml"
    "scripts/create_topics.sh"
    "scripts/test_kafka.py"
    "scripts/monitor_kafka.py"
    "scripts/start_full_system.sh"
)

for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo -e "üìÑ $file ${GREEN}‚úÖ EXISTS${NC}"
    else
        echo -e "üìÑ $file ${RED}‚ùå MISSING${NC}"
    fi
done
echo ""

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
echo -e "${BLUE}üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
echo ""

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
total_checks=0
passed_checks=0

# –ü—Ä–æ–≤–µ—Ä–∫–∏ Docker
for container in "kafka-1" "kafka-2" "kafka-3" "zookeeper-1" "zookeeper-2" "zookeeper-3" "kafka-ui"; do
    total_checks=$((total_checks + 1))
    if docker ps --format "table {{.Names}}" | grep -q "$container"; then
        passed_checks=$((passed_checks + 1))
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
for url in "http://localhost:8000/health" "http://localhost:8080" "http://localhost:8000/docs"; do
    total_checks=$((total_checks + 1))
    if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -q "200"; then
        passed_checks=$((passed_checks + 1))
    fi
done

# –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
for file in "${files_to_check[@]}"; do
    total_checks=$((total_checks + 1))
    if [ -f "$file" ]; then
        passed_checks=$((passed_checks + 1))
    fi
done

echo -e "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: ${GREEN}$passed_checks${NC} –∏–∑ ${BLUE}$total_checks${NC}"

if [ $passed_checks -eq $total_checks ]; then
    echo -e "${GREEN}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.${NC}"
    exit 0
elif [ $passed_checks -gt $((total_checks / 2)) ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ. –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞.${NC}"
    exit 1
else
    echo -e "${RED}‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ—à–ª–∏. –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.${NC}"
    exit 2
fi
