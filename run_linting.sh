#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ AGB SERVICE

echo "üîç –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ AGB SERVICE"
echo "====================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "docker-compose.yml" ]; then
    print_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend –ª–∏–Ω—Ç–∏–Ω–≥–∞
run_backend_linting() {
    print_status "–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞ backend..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps | grep -q "agregator_backend"; then
        print_warning "Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d agregator-backend
        sleep 10
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–∏–Ω—Ç–∏–Ω–≥–∞
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ª–∏–Ω—Ç–∏–Ω–≥–∞..."
    docker exec agregator_backend pip install flake8 black isort mypy pylint bandit
    
    BACKEND_SUCCESS=true
    
    # Black - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (Black)..."
    if docker exec agregator_backend black --check backend/; then
        print_success "Black: –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "Black: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        print_status "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
        docker exec agregator_backend black backend/
        print_success "Black: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
    fi
    
    # isort - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)..."
    if docker exec agregator_backend isort --check-only backend/; then
        print_success "isort: –∏–º–ø–æ—Ä—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "isort: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏–º–ø–æ—Ä—Ç–æ–≤"
        print_status "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
        docker exec agregator_backend isort backend/
        print_success "isort: –∏–º–ø–æ—Ä—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
    fi
    
    # flake8 - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (flake8)..."
    if docker exec agregator_backend flake8 backend/; then
        print_success "flake8: —Å—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    else
        print_error "flake8: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º –∫–æ–¥–∞"
        BACKEND_SUCCESS=false
    fi
    
    # pylint - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    print_status "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ (pylint)..."
    if docker exec agregator_backend pylint backend/ --disable=C0114,C0116; then
        print_success "pylint: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–π–¥–µ–Ω"
    else
        print_warning "pylint: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
    
    # mypy - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (mypy)..."
    if docker exec agregator_backend mypy backend/ --ignore-missing-imports; then
        print_success "mypy: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        print_warning "mypy: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
    
    # bandit - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (bandit)..."
    if docker exec agregator_backend bandit -r backend/ -f json -o /tmp/bandit-report.json; then
        print_success "bandit: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        print_warning "bandit: –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    fi
    
    return $([ "$BACKEND_SUCCESS" = true ] && echo 0 || echo 1)
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ frontend –ª–∏–Ω—Ç–∏–Ω–≥–∞
run_frontend_linting() {
    print_status "–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞ frontend..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps | grep -q "agregator_frontend"; then
        print_warning "Frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º..."
        docker-compose up -d agregator-frontend
        sleep 10
    fi
    
    FRONTEND_SUCCESS=true
    
    # ESLint - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (ESLint)..."
    if docker exec agregator_frontend npm run lint; then
        print_success "ESLint: –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    else
        print_error "ESLint: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º"
        FRONTEND_SUCCESS=false
    fi
    
    # Prettier - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Prettier)..."
    if docker exec agregator_frontend npm run format:check; then
        print_success "Prettier: –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    else
        print_warning "Prettier: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        print_status "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
        docker exec agregator_frontend npm run format
        print_success "Prettier: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
    fi
    
    # TypeScript - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (TypeScript)..."
    if docker exec agregator_frontend npm run type-check; then
        print_success "TypeScript: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        print_error "TypeScript: –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤"
        FRONTEND_SUCCESS=false
    fi
    
    return $([ "$FRONTEND_SUCCESS" = true ] && echo 0 || echo 1)
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
run_auto_fix() {
    print_status "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º..."
    
    # Backend –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print_status "–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend..."
    docker exec agregator_backend black backend/
    docker exec agregator_backend isort backend/
    
    # Frontend –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    print_status "–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ frontend..."
    docker exec agregator_frontend npm run lint:fix
    docker exec agregator_frontend npm run format
    
    print_success "–ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ª–∏–Ω—Ç–∏–Ω–≥–µ..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    mkdir -p reports/linting
    
    # Backend –æ—Ç—á–µ—Ç—ã
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è backend..."
    docker exec agregator_backend flake8 backend/ --format=json > reports/linting/backend-flake8.json 2>/dev/null || true
    docker exec agregator_backend pylint backend/ --output-format=json > reports/linting/backend-pylint.json 2>/dev/null || true
    docker exec agregator_backend mypy backend/ --json-report reports/linting/backend-mypy 2>/dev/null || true
    
    # Frontend –æ—Ç—á–µ—Ç—ã
    print_status "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è frontend..."
    docker exec agregator_frontend npm run lint -- --format=json > reports/linting/frontend-eslint.json 2>/dev/null || true
    
    print_success "–û—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ reports/linting/"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
run_all_linting() {
    print_status "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ª–∏–Ω—Ç–∏–Ω–≥–∞..."
    
    BACKEND_SUCCESS=true
    FRONTEND_SUCCESS=true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend –ª–∏–Ω—Ç–∏–Ω–≥
    if ! run_backend_linting; then
        BACKEND_SUCCESS=false
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º frontend –ª–∏–Ω—Ç–∏–Ω–≥
    if ! run_frontend_linting; then
        FRONTEND_SUCCESS=false
    fi
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    echo ""
    echo "====================================="
    echo "üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –õ–ò–ù–¢–ò–ù–ì–ê"
    echo "====================================="
    
    if [ "$BACKEND_SUCCESS" = true ]; then
        print_success "Backend –ª–∏–Ω—Ç–∏–Ω–≥: –ü–†–û–ô–î–ï–ù"
    else
        print_error "Backend –ª–∏–Ω—Ç–∏–Ω–≥: –ü–†–û–í–ê–õ–ï–ù"
    fi
    
    if [ "$FRONTEND_SUCCESS" = true ]; then
        print_success "Frontend –ª–∏–Ω—Ç–∏–Ω–≥: –ü–†–û–ô–î–ï–ù"
    else
        print_error "Frontend –ª–∏–Ω—Ç–∏–Ω–≥: –ü–†–û–í–ê–õ–ï–ù"
    fi
    
    if [ "$BACKEND_SUCCESS" = true ] && [ "$FRONTEND_SUCCESS" = true ]; then
        print_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
        return 0
    else
        print_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å! ‚ùå"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-all}" in
    "backend")
        run_backend_linting
        ;;
    "frontend")
        run_frontend_linting
        ;;
    "fix")
        run_auto_fix
        ;;
    "report")
        generate_report
        ;;
    "all")
        run_all_linting
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backend|frontend|fix|report|all]"
        echo ""
        echo "–û–ø—Ü–∏–∏:"
        echo "  backend   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend –ª–∏–Ω—Ç–∏–Ω–≥"
        echo "  frontend  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend –ª–∏–Ω—Ç–∏–Ω–≥"
        echo "  fix       - –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        echo "  report    - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ª–∏–Ω—Ç–∏–Ω–≥–µ"
        echo "  all       - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        exit 1
        ;;
esac
