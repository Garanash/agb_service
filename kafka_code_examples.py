# üêç –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è Apache Kafka

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

```bash
pip install kafka-python aiokafka pydantic python-dotenv
```

## üîß –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### `kafka_config.py`
```python
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
"""
import os
from typing import Dict, Any
from pydantic import BaseSettings

class KafkaConfig(BaseSettings):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka"""
    
    # –ë—Ä–æ–∫–µ—Ä—ã Kafka
    bootstrap_servers: str = "localhost:9092,localhost:9093,localhost:9094"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_protocol: str = "PLAINTEXT"  # PLAINTEXT, SASL_PLAINTEXT, SASL_SSL, SSL
    sasl_mechanism: str = "PLAIN"
    sasl_username: str = ""
    sasl_password: str = ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ producer
    producer_acks: str = "all"  # all, 1, 0
    producer_retries: int = 3
    producer_batch_size: int = 16384
    producer_linger_ms: int = 10
    producer_compression_type: str = "snappy"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ consumer
    consumer_group_id: str = "agregator-service"
    consumer_auto_offset_reset: str = "earliest"  # earliest, latest
    consumer_enable_auto_commit: bool = True
    consumer_auto_commit_interval_ms: int = 1000
    consumer_max_poll_records: int = 500
    
    # –¢–æ–ø–∏–∫–∏
    topics: Dict[str, Dict[str, Any]] = {
        "request-events": {
            "partitions": 6,
            "replication_factor": 3,
            "retention_ms": 604800000  # 7 –¥–Ω–µ–π
        },
        "workflow-events": {
            "partitions": 3,
            "replication_factor": 3,
            "retention_ms": 2592000000  # 30 –¥–Ω–µ–π
        },
        "notification-events": {
            "partitions": 3,
            "replication_factor": 3,
            "retention_ms": 259200000  # 3 –¥–Ω—è
        },
        "security-events": {
            "partitions": 3,
            "replication_factor": 3,
            "retention_ms": 7776000000  # 90 –¥–Ω–µ–π
        },
        "hr-events": {
            "partitions": 3,
            "replication_factor": 3,
            "retention_ms": 31536000000  # 365 –¥–Ω–µ–π
        },
        "audit-events": {
            "partitions": 6,
            "replication_factor": 3,
            "retention_ms": 31536000000  # 365 –¥–Ω–µ–π
        }
    }
    
    class Config:
        env_file = ".env"
        env_prefix = "KAFKA_"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
kafka_config = KafkaConfig()
```

### `kafka_events.py`
```python
"""
–°—Ö–µ–º—ã —Å–æ–±—ã—Ç–∏–π Kafka
"""
from datetime import datetime
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
from enum import Enum

class EventType(str, Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π"""
    # Request Events
    REQUEST_CREATED = "request.created"
    REQUEST_UPDATED = "request.updated"
    REQUEST_CANCELLED = "request.cancelled"
    REQUEST_CLARIFICATION_NEEDED = "request.clarification_needed"
    
    # Workflow Events
    WORKFLOW_MANAGER_ASSIGNED = "workflow.manager_assigned"
    WORKFLOW_SENT_TO_CONTRACTORS = "workflow.sent_to_contractors"
    WORKFLOW_CONTRACTOR_ASSIGNED = "workflow.contractor_assigned"
    WORKFLOW_WORK_STARTED = "workflow.work_started"
    WORKFLOW_WORK_COMPLETED = "workflow.work_completed"
    WORKFLOW_STATUS_CHANGED = "workflow.status_changed"
    
    # Notification Events
    NOTIFICATION_EMAIL_SENT = "notification.email.sent"
    NOTIFICATION_TELEGRAM_SENT = "notification.telegram.sent"
    NOTIFICATION_SMS_SENT = "notification.sms.sent"
    NOTIFICATION_FAILED = "notification.failed"
    
    # Security Events
    SECURITY_CONTRACTOR_VERIFIED = "security.contractor_verified"
    SECURITY_CONTRACTOR_REJECTED = "security.contractor_rejected"
    SECURITY_ACCESS_GRANTED = "security.access_granted"
    SECURITY_ACCESS_REVOKED = "security.access_revoked"
    
    # HR Events
    HR_DOCUMENT_CREATED = "hr.document_created"
    HR_DOCUMENT_SIGNED = "hr.document_signed"
    HR_CONTRACT_GENERATED = "hr.contract_generated"
    HR_PAYMENT_PROCESSED = "hr.payment_processed"
    
    # Audit Events
    AUDIT_USER_ACTION = "audit.user_action"
    AUDIT_SYSTEM_EVENT = "audit.system_event"
    AUDIT_ERROR_OCCURRED = "audit.error_occurred"
    AUDIT_PERFORMANCE_METRIC = "audit.performance_metric"

class BaseEvent(BaseModel):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
    event_type: EventType
    event_id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è")
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    version: str = "1.0"
    source: str = "agregator-service"
    correlation_id: Optional[str] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)

class RequestCreatedEvent(BaseEvent):
    """–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    event_type: EventType = EventType.REQUEST_CREATED
    request_id: int
    customer_id: int
    title: str
    description: str
    urgency: str
    region: str
    city: str
    address: str
    equipment_type: Optional[str] = None
    priority: str = "normal"

class WorkflowContractorAssignedEvent(BaseEvent):
    """–°–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    event_type: EventType = EventType.WORKFLOW_CONTRACTOR_ASSIGNED
    request_id: int
    contractor_id: int
    manager_id: int
    previous_status: str
    new_status: str = "assigned"
    assignment_reason: Optional[str] = None

class NotificationTelegramSentEvent(BaseEvent):
    """–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    event_type: EventType = EventType.NOTIFICATION_TELEGRAM_SENT
    recipient_id: int
    recipient_telegram_username: str
    message_type: str  # assignment, completion, reminder
    request_id: Optional[int] = None
    message_content: str
    delivery_status: str = "sent"
    telegram_message_id: Optional[int] = None

class SecurityContractorVerifiedEvent(BaseEvent):
    """–°–æ–±—ã—Ç–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    event_type: EventType = EventType.SECURITY_CONTRACTOR_VERIFIED
    contractor_id: int
    verification_type: str  # identity, documents, background_check
    verification_result: str  # approved, rejected, pending
    verified_by: int  # security officer id
    verification_notes: Optional[str] = None
    documents_verified: List[str] = Field(default_factory=list)

class AuditUserActionEvent(BaseEvent):
    """–°–æ–±—ã—Ç–∏–µ –∞—É–¥–∏—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    event_type: EventType = EventType.AUDIT_USER_ACTION
    user_id: int
    user_role: str
    action: str
    resource_type: str  # request, user, document
    resource_id: Optional[int] = None
    ip_address: str
    user_agent: str
    success: bool
    error_message: Optional[str] = None
    additional_data: Dict[str, Any] = Field(default_factory=dict)
```

## üì§ Kafka Producer

### `kafka_producer.py`
```python
"""
Kafka Producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
"""
import json
import logging
import uuid
from typing import Dict, Any, Optional
from datetime import datetime
from kafka import KafkaProducer
from kafka.errors import KafkaError, KafkaTimeoutError
from kafka_config import kafka_config
from kafka_events import BaseEvent

logger = logging.getLogger(__name__)

class KafkaEventProducer:
    """Producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ Kafka"""
    
    def __init__(self):
        self.producer = None
        self._initialize_producer()
    
    def _initialize_producer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka producer"""
        try:
            producer_config = {
                'bootstrap_servers': kafka_config.bootstrap_servers.split(','),
                'acks': kafka_config.producer_acks,
                'retries': kafka_config.producer_retries,
                'batch_size': kafka_config.producer_batch_size,
                'linger_ms': kafka_config.producer_linger_ms,
                'compression_type': kafka_config.producer_compression_type,
                'value_serializer': lambda v: json.dumps(v, default=str).encode('utf-8'),
                'key_serializer': lambda k: str(k).encode('utf-8') if k else None,
                'request_timeout_ms': 30000,
                'metadata_max_age_ms': 300000,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if kafka_config.security_protocol != "PLAINTEXT":
                producer_config.update({
                    'security_protocol': kafka_config.security_protocol,
                    'sasl_mechanism': kafka_config.sasl_mechanism,
                    'sasl_plain_username': kafka_config.sasl_username,
                    'sasl_plain_password': kafka_config.sasl_password,
                })
            
            self.producer = KafkaProducer(**producer_config)
            logger.info("‚úÖ Kafka Producer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Producer: {e}")
            raise
    
    def publish_event(
        self, 
        topic: str, 
        event: BaseEvent, 
        key: Optional[str] = None,
        partition: Optional[int] = None
    ) -> bool:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Kafka
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
            event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
            key: –ö–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            partition: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞—Ä—Ç–∏—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
            if not event.event_id:
                event.event_id = str(uuid.uuid4())
            
            # –î–æ–±–∞–≤–ª—è–µ–º correlation_id –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
            if not event.correlation_id:
                event.correlation_id = str(uuid.uuid4())
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            event_data = event.dict()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            partition_key = key or self._get_partition_key(event)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            future = self.producer.send(
                topic=topic,
                value=event_data,
                key=partition_key,
                partition=partition
            )
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            record_metadata = future.get(timeout=10)
            
            logger.info(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event.event_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {topic}, "
                f"–ø–∞—Ä—Ç–∏—Ü–∏—è {record_metadata.partition}, "
                f"offset {record_metadata.offset}"
            )
            
            return True
            
        except KafkaTimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è {event.event_type} –≤ —Ç–æ–ø–∏–∫ {topic}")
            return False
        except KafkaError as e:
            logger.error(f"‚ùå Kafka –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è {event.event_type}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è {event.event_type}: {e}")
            return False
    
    def _get_partition_key(self, event: BaseEvent) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ
        
        Returns:
            str: –ö–ª—é—á –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º request_id
        if hasattr(event, 'request_id'):
            return str(event.request_id)
        
        # –î–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id
        if hasattr(event, 'user_id'):
            return str(event.user_id)
        
        # –î–ª—è —Å–æ–±—ã—Ç–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º contractor_id
        if hasattr(event, 'contractor_id'):
            return str(event.contractor_id)
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º event_id
        return event.event_id
    
    def publish_batch(self, events: list) -> Dict[str, int]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            events: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (topic, event, key)
        
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        results = {"success": 0, "failed": 0}
        
        for topic, event, key in events:
            if self.publish_event(topic, event, key):
                results["success"] += 1
            else:
                results["failed"] += 1
        
        logger.info(f"üìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ producer"""
        if self.producer:
            self.producer.flush()
            self.producer.close()
            logger.info("üîí Kafka Producer –∑–∞–∫—Ä—ã—Ç")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä producer
kafka_producer = KafkaEventProducer()
```

## üì• Kafka Consumer

### `kafka_consumer.py`
```python
"""
Kafka Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
"""
import json
import logging
import signal
import sys
from typing import Dict, Any, Callable, Optional
from kafka import KafkaConsumer
from kafka.errors import KafkaError
from kafka_config import kafka_config
from kafka_events import BaseEvent, EventType

logger = logging.getLogger(__name__)

class KafkaEventConsumer:
    """Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Kafka"""
    
    def __init__(self, group_id: str, topics: list):
        self.group_id = group_id
        self.topics = topics
        self.consumer = None
        self.event_handlers: Dict[EventType, Callable] = {}
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _initialize_consumer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer"""
        try:
            consumer_config = {
                'bootstrap_servers': kafka_config.bootstrap_servers.split(','),
                'group_id': self.group_id,
                'auto_offset_reset': kafka_config.consumer_auto_offset_reset,
                'enable_auto_commit': kafka_config.consumer_enable_auto_commit,
                'auto_commit_interval_ms': kafka_config.consumer_auto_commit_interval_ms,
                'max_poll_records': kafka_config.consumer_max_poll_records,
                'value_deserializer': lambda m: json.loads(m.decode('utf-8')),
                'key_deserializer': lambda m: m.decode('utf-8') if m else None,
                'session_timeout_ms': 30000,
                'heartbeat_interval_ms': 10000,
                'max_poll_interval_ms': 300000,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if kafka_config.security_protocol != "PLAINTEXT":
                consumer_config.update({
                    'security_protocol': kafka_config.security_protocol,
                    'sasl_mechanism': kafka_config.sasl_mechanism,
                    'sasl_plain_username': kafka_config.sasl_username,
                    'sasl_plain_password': kafka_config.sasl_password,
                })
            
            self.consumer = KafkaConsumer(**consumer_config)
            self.consumer.subscribe(self.topics)
            
            logger.info(f"‚úÖ Kafka Consumer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: {self.topics}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Consumer: {e}")
            raise
    
    def register_handler(self, event_type: EventType, handler: Callable):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        self.event_handlers[event_type] = handler
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event_type}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
    
    def _process_message(self, message) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
            event_data = message.value
            event_type = EventType(event_data.get('event_type'))
            
            logger.info(
                f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type} –∏–∑ —Ç–æ–ø–∏–∫–∞ {message.topic}, "
                f"–ø–∞—Ä—Ç–∏—Ü–∏—è {message.partition}, offset {message.offset}"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handler = self.event_handlers.get(event_type)
            if not handler:
                logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            success = handler(event_data)
            
            if success:
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_type} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def start_consuming(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.consumer:
            self._initialize_consumer()
        
        self.running = True
        logger.info(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–æ–≤: {self.topics}")
        
        try:
            while self.running:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                message_batch = self.consumer.poll(timeout_ms=1000)
                
                if not message_batch:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for topic_partition, messages in message_batch.items():
                    for message in messages:
                        if not self.running:
                            break
                        
                        success = self._process_message(message)
                        
                        if not success:
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è Dead Letter Queue
                            logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DLQ")
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
        finally:
            self.stop_consuming()
    
    def stop_consuming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.running = False
        if self.consumer:
            self.consumer.close()
            logger.info("üîí Kafka Consumer –∑–∞–∫—Ä—ã—Ç")
```

## üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

### `request_service_integration.py`
```python
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Request Service —Å Kafka
"""
import logging
from typing import Dict, Any
from sqlalchemy.orm import Session
from kafka_producer import kafka_producer
from kafka_events import RequestCreatedEvent, WorkflowContractorAssignedEvent
from models import RepairRequest, RequestStatus

logger = logging.getLogger(__name__)

class RequestServiceKafkaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Request Service —Å Kafka"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def create_request_with_event(self, customer_id: int, request_data: dict) -> RepairRequest:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏—è
        
        Args:
            customer_id: ID –∑–∞–∫–∞–∑—á–∏–∫–∞
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        
        Returns:
            RepairRequest: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
        """
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
        request = RepairRequest(
            customer_id=customer_id,
            title=request_data.get('title'),
            description=request_data.get('description'),
            urgency=request_data.get('urgency'),
            preferred_date=request_data.get('preferred_date'),
            address=request_data.get('address'),
            city=request_data.get('city'),
            region=request_data.get('region'),
            equipment_type=request_data.get('equipment_type'),
            equipment_brand=request_data.get('equipment_brand'),
            equipment_model=request_data.get('equipment_model'),
            problem_description=request_data.get('problem_description'),
            priority=request_data.get('priority', 'normal'),
            status=RequestStatus.NEW
        )
        
        self.db.add(request)
        self.db.commit()
        self.db.refresh(request)
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = RequestCreatedEvent(
            request_id=request.id,
            customer_id=customer_id,
            title=request.title,
            description=request.description,
            urgency=request.urgency or "medium",
            region=request.region or "unknown",
            city=request.city or "",
            address=request.address or "",
            equipment_type=request.equipment_type,
            priority=request.priority
        )
        
        success = kafka_producer.publish_event("request-events", event)
        
        if success:
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request.id}")
        
        return request
    
    def assign_contractor_with_event(
        self, 
        request_id: int, 
        contractor_id: int, 
        manager_id: int
    ) -> RepairRequest:
        """
        –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏—è
        
        Args:
            request_id: ID –∑–∞—è–≤–∫–∏
            contractor_id: ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            manager_id: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Returns:
            RepairRequest: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        request = self.db.query(RepairRequest).filter(
            RepairRequest.id == request_id
        ).first()
        
        if not request:
            raise ValueError(f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        previous_status = request.status
        request.status = RequestStatus.ASSIGNED
        request.assigned_contractor_id = contractor_id
        
        self.db.commit()
        self.db.refresh(request)
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = WorkflowContractorAssignedEvent(
            request_id=request_id,
            contractor_id=contractor_id,
            manager_id=manager_id,
            previous_status=previous_status,
            new_status=RequestStatus.ASSIGNED,
            assignment_reason="Manager assignment"
        )
        
        success = kafka_producer.publish_event("workflow-events", event)
        
        if success:
            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
        
        return request
```

### `notification_service_consumer.py`
```python
"""
Consumer –¥–ª—è Notification Service
"""
import logging
import asyncio
from typing import Dict, Any
from sqlalchemy.orm import Session
from kafka_consumer import KafkaEventConsumer
from kafka_events import EventType, RequestCreatedEvent, WorkflowContractorAssignedEvent
from services.telegram_bot_service import TelegramBotService
from services.email_service import EmailService

logger = logging.getLogger(__name__)

class NotificationServiceConsumer:
    """Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, db: Session):
        self.db = db
        self.telegram_service = TelegramBotService(db)
        self.email_service = EmailService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º consumer
        self.consumer = KafkaEventConsumer(
            group_id="notification-service",
            topics=["request-events", "workflow-events"]
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        self.consumer.register_handler(
            EventType.REQUEST_CREATED,
            self._handle_request_created
        )
        
        self.consumer.register_handler(
            EventType.WORKFLOW_CONTRACTOR_ASSIGNED,
            self._handle_contractor_assigned
        )
    
    def _handle_request_created(self, event_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            event = RequestCreatedEvent(**event_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
            asyncio.create_task(self._send_customer_confirmation(event))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            asyncio.create_task(self._notify_managers(event))
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def _handle_contractor_assigned(self, event_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            event = WorkflowContractorAssignedEvent(**event_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            asyncio.create_task(self._notify_contractor(event))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            asyncio.create_task(self._notify_customer(event))
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
            return False
    
    async def _send_customer_confirmation(self, event: RequestCreatedEvent):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
            customer_profile = self.db.query(CustomerProfile).filter(
                CustomerProfile.id == event.customer_id
            ).first()
            
            if customer_profile and customer_profile.user.email:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
                await self.email_service.send_request_confirmation(
                    email=customer_profile.user.email,
                    request_id=event.request_id,
                    title=event.title
                )
                
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É {event.customer_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")
    
    async def _notify_managers(self, event: RequestCreatedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            managers = self.db.query(User).filter(User.role == "manager").all()
            
            for manager in managers:
                if manager.email:
                    await self.email_service.send_new_request_notification(
                        email=manager.email,
                        request_id=event.request_id,
                        title=event.title,
                        urgency=event.urgency
                    )
            
            logger.info(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ #{event.request_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
    
    async def _notify_contractor(self, event: WorkflowContractorAssignedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            success = await self.telegram_service.send_request_assignment_notification(
                contractor_id=event.contractor_id,
                request_id=event.request_id
            )
            
            if success:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {event.contractor_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {event.contractor_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
    
    async def _notify_customer(self, event: WorkflowContractorAssignedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            request = self.db.query(RepairRequest).filter(
                RepairRequest.id == event.request_id
            ).first()
            
            if request and request.customer.user.email:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∑–∞–∫–∞–∑—á–∏–∫—É
                await self.email_service.send_contractor_assigned_notification(
                    email=request.customer.user.email,
                    request_id=event.request_id,
                    contractor_name=request.assigned_contractor.first_name + " " + request.assigned_contractor.last_name
                )
                
                logger.info(f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ consumer"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Notification Service Consumer")
        self.consumer.start_consuming()
```

## üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤

### `main_kafka_service.py`
```python
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Kafka —Å–µ—Ä–≤–∏—Å–æ–≤
"""
import logging
import asyncio
from database import get_db
from notification_service_consumer import NotificationServiceConsumer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Kafka —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = next(get_db())
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º consumer
        notification_consumer = NotificationServiceConsumer(db)
        notification_consumer.start()
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    main()
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏

### `kafka_monitoring.py`
```python
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Kafka
"""
import logging
from typing import Dict, Any
from kafka import KafkaAdminClient
from kafka.admin import ConfigResource, ConfigResourceType
from kafka_config import kafka_config

logger = logging.getLogger(__name__)

class KafkaMonitoring:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Kafka"""
    
    def __init__(self):
        self.admin_client = None
        self._initialize_admin_client()
    
    def _initialize_admin_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è admin client"""
        try:
            admin_config = {
                'bootstrap_servers': kafka_config.bootstrap_servers.split(','),
            }
            
            if kafka_config.security_protocol != "PLAINTEXT":
                admin_config.update({
                    'security_protocol': kafka_config.security_protocol,
                    'sasl_mechanism': kafka_config.sasl_mechanism,
                    'sasl_plain_username': kafka_config.sasl_username,
                    'sasl_plain_password': kafka_config.sasl_password,
                })
            
            self.admin_client = KafkaAdminClient(**admin_config)
            logger.info("‚úÖ Kafka Admin Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Admin Client: {e}")
            raise
    
    def get_topic_metrics(self, topic: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ç–æ–ø–∏–∫–∞
        
        Args:
            topic: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞
        
        Returns:
            Dict[str, Any]: –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ø–∏–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–ø–∏–∫–∞
            metadata = self.admin_client.describe_topics([topic])
            
            if topic not in metadata:
                return {"error": f"–¢–æ–ø–∏–∫ {topic} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            topic_metadata = metadata[topic]
            
            metrics = {
                "topic": topic,
                "partitions": len(topic_metadata.partitions),
                "replication_factor": len(topic_metadata.partitions[0].replicas),
                "partition_details": []
            }
            
            for partition_id, partition_metadata in topic_metadata.partitions.items():
                partition_info = {
                    "partition": partition_id,
                    "leader": partition_metadata.leader,
                    "replicas": partition_metadata.replicas,
                    "isr": partition_metadata.isr  # In-Sync Replicas
                }
                metrics["partition_details"].append(partition_info)
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–ø–∏–∫–∞ {topic}: {e}")
            return {"error": str(e)}
    
    def get_consumer_group_metrics(self, group_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ consumer group
        
        Args:
            group_id: ID consumer group
        
        Returns:
            Dict[str, Any]: –ú–µ—Ç—Ä–∏–∫–∏ consumer group
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ consumer group
            consumer_groups = self.admin_client.describe_consumer_groups([group_id])
            
            if group_id not in consumer_groups:
                return {"error": f"Consumer group {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            group_info = consumer_groups[group_id]
            
            metrics = {
                "group_id": group_id,
                "state": group_info.state,
                "members": len(group_info.members),
                "member_details": []
            }
            
            for member_id, member_info in group_info.members.items():
                member_detail = {
                    "member_id": member_id,
                    "client_id": member_info.client_id,
                    "client_host": member_info.client_host,
                    "assigned_partitions": member_info.assignment.partitions
                }
                metrics["member_details"].append(member_detail)
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ consumer group {group_id}: {e}")
            return {"error": str(e)}
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ admin client"""
        if self.admin_client:
            self.admin_client.close()
            logger.info("üîí Kafka Admin Client –∑–∞–∫—Ä—ã—Ç")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    monitoring = KafkaMonitoring()
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ø–∏–∫–∞
    topic_metrics = monitoring.get_topic_metrics("request-events")
    print("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ø–∏–∫–∞ request-events:")
    print(topic_metrics)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ consumer group
    group_metrics = monitoring.get_consumer_group_metrics("notification-service")
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ consumer group notification-service:")
    print(group_metrics)
    
    monitoring.close()
```

