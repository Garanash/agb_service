#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import random
from datetime import datetime, timedelta
from passlib.context import CryptContext
from faker import Faker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import SessionLocal, Base, engine
from models import (
    User, UserRole, CustomerProfile, ContractorProfile, 
    RepairRequest, RequestStatus,
    ContractorResponse, SecurityVerification, HRDocument
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Faker –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
fake = Faker('ru_RU')
pwd_context = CryptContext(schemes=['sha256_crypt'], deprecated='auto')

def create_test_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    db = SessionLocal()
    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        users_data = [
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
            {
                'username': 'admin1',
                'email': 'admin1@agregator.com',
                'first_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
                'last_name': '–ü–µ—Ç—Ä–æ–≤',
                'middle_name': '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
                'phone': '+7 (495) 123-45-67',
                'role': UserRole.ADMIN,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'admin2',
                'email': 'admin2@agregator.com',
                'first_name': '–ï–ª–µ–Ω–∞',
                'last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
                'middle_name': '–ò–≥–æ—Ä–µ–≤–Ω–∞',
                'phone': '+7 (495) 234-56-78',
                'role': UserRole.ADMIN,
                'is_active': True,
                'email_verified': True
            },
            
            # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
            {
                'username': 'manager1',
                'email': 'manager1@agregator.com',
                'first_name': '–î–º–∏—Ç—Ä–∏–π',
                'last_name': '–ö–æ–∑–ª–æ–≤',
                'middle_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
                'phone': '+7 (495) 345-67-89',
                'role': UserRole.MANAGER,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'manager2',
                'email': 'manager2@agregator.com',
                'first_name': '–û–ª—å–≥–∞',
                'last_name': '–ú–æ—Ä–æ–∑–æ–≤–∞',
                'middle_name': '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
                'phone': '+7 (495) 456-78-90',
                'role': UserRole.MANAGER,
                'is_active': True,
                'email_verified': True
            },
            
            # –ó–∞–∫–∞–∑—á–∏–∫–∏
            {
                'username': 'customer1',
                'email': 'customer1@company.com',
                'first_name': '–ò–≤–∞–Ω',
                'last_name': '–ò–≤–∞–Ω–æ–≤',
                'middle_name': '–ü–µ—Ç—Ä–æ–≤–∏—á',
                'phone': '+7 (495) 567-89-01',
                'role': UserRole.CUSTOMER,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'customer2',
                'email': 'customer2@mining.com',
                'first_name': '–ú–∞—Ä–∏—è',
                'last_name': '–°–º–∏—Ä–Ω–æ–≤–∞',
                'middle_name': '–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞',
                'phone': '+7 (495) 678-90-12',
                'role': UserRole.CUSTOMER,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'customer3',
                'email': 'customer3@oil.com',
                'first_name': '–°–µ—Ä–≥–µ–π',
                'last_name': '–ö—É–∑–Ω–µ—Ü–æ–≤',
                'middle_name': '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
                'phone': '+7 (495) 789-01-23',
                'role': UserRole.CUSTOMER,
                'is_active': True,
                'email_verified': True
            },
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            {
                'username': 'contractor1',
                'email': 'contractor1@service.com',
                'first_name': '–ê–Ω–¥—Ä–µ–π',
                'last_name': '–í–æ–ª–∫–æ–≤',
                'middle_name': '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á',
                'phone': '+7 (495) 890-12-34',
                'role': UserRole.CONTRACTOR,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'contractor2',
                'email': 'contractor2@repair.com',
                'first_name': '–ù–∏–∫–æ–ª–∞–π',
                'last_name': '–õ–µ–±–µ–¥–µ–≤',
                'middle_name': '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
                'phone': '+7 (495) 901-23-45',
                'role': UserRole.CONTRACTOR,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'contractor3',
                'email': 'contractor3@tech.com',
                'first_name': '–í–ª–∞–¥–∏–º–∏—Ä',
                'last_name': '–°–æ–∫–æ–ª–æ–≤',
                'middle_name': '–ò–≤–∞–Ω–æ–≤–∏—á',
                'phone': '+7 (495) 012-34-56',
                'role': UserRole.CONTRACTOR,
                'is_active': True,
                'email_verified': True
            },
            
            # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã
            {
                'username': 'engineer1',
                'email': 'engineer1@service.com',
                'first_name': '–ê–ª–µ–∫—Å–µ–π',
                'last_name': '–ü–æ–ø–æ–≤',
                'middle_name': '–°–µ—Ä–≥–µ–µ–≤–∏—á',
                'phone': '+7 (495) 123-45-78',
                'role': UserRole.SERVICE_ENGINEER,
                'is_active': True,
                'email_verified': True
            },
            {
                'username': 'engineer2',
                'email': 'engineer2@tech.com',
                'first_name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
                'last_name': '–í–∞—Å–∏–ª—å–µ–≤–∞',
                'middle_name': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞',
                'phone': '+7 (495) 234-56-89',
                'role': UserRole.SERVICE_ENGINEER,
                'is_active': True,
                'email_verified': True
            },
            
            # –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            {
                'username': 'security1',
                'email': 'security1@company.com',
                'first_name': '–†–æ–º–∞–Ω',
                'last_name': '–°–µ–º–µ–Ω–æ–≤',
                'middle_name': '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á',
                'phone': '+7 (495) 345-67-90',
                'role': UserRole.SECURITY,
                'is_active': True,
                'email_verified': True
            },
            
            # HR
            {
                'username': 'hr1',
                'email': 'hr1@company.com',
                'first_name': '–ê–Ω–Ω–∞',
                'last_name': '–ù–æ–≤–∏–∫–æ–≤–∞',
                'middle_name': '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
                'phone': '+7 (495) 456-78-01',
                'role': UserRole.HR,
                'is_active': True,
                'email_verified': True
            }
        ]
        
        created_users = []
        for user_data in users_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(
                (User.username == user_data['username']) | 
                (User.email == user_data['email'])
            ).first()
            
            if existing_user:
                print(f"  ‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                created_users.append(existing_user)
                continue
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            hashed_password = pwd_context.hash('password123')
            user = User(
                username=user_data['username'],
                email=user_data['email'],
                hashed_password=hashed_password,
                first_name=user_data['first_name'],
                last_name=user_data['last_name'],
                middle_name=user_data['middle_name'],
                phone=user_data['phone'],
                role=user_data['role'],
                is_active=user_data['is_active'],
                email_verified=user_data['email_verified'],
                is_password_changed=False
            )
            
            db.add(user)
            created_users.append(user)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']} ({user_data['role']})")
        
        db.commit()
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
        for user in created_users:
            db.refresh(user)
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return created_users
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        db.close()

def create_customer_profiles(users):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤"""
    db = SessionLocal()
    try:
        print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...")
        
        customer_users = [u for u in users if u.role == UserRole.CUSTOMER]
        companies = [
            {
                'company_name': '–û–û–û "–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä"',
                'region': '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                'inn_or_ogrn': '1234567890',
                'equipment_brands': ['–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä', '–≠–ø–∏—Ä–æ–≥', '–ö–∞—Ç–µ—Ä–ø–∏–ª–ª–∞—Ä'],
                'equipment_types': ['–ë—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã', '–ü–æ–≥—Ä—É–∑—á–∏–∫–∏'],
                'mining_operations': ['–ì–µ–æ–ª–æ–≥–æ—Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–û—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'],
                'service_history': '–ë–æ–ª–µ–µ 10 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â–µ–π –æ—Ç—Ä–∞—Å–ª–∏'
            },
            {
                'company_name': '–ê–û "–°–∏–±–∏—Ä—Å–∫–∏–µ —Ä—É–¥–Ω–∏–∫–∏"',
                'region': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π',
                'inn_or_ogrn': '2345678901',
                'equipment_brands': ['–ë–æ—Ä—Ç–ª–∞–Ω–≥–∏—Ä', '–ö–æ–º–ø–∞–Ω–∏', '–õ–∏–±—Ö–µ—Ä—Ä'],
                'equipment_types': ['–°–∞–º–æ—Å–≤–∞–ª—ã', '–ë—É–ª—å–¥–æ–∑–µ—Ä—ã', '–ö—Ä–∞–Ω—ã'],
                'mining_operations': ['–ü–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö'],
                'service_history': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –¥–æ–±—ã—á–µ —É–≥–ª—è –∏ –∂–µ–ª–µ–∑–Ω–æ–π —Ä—É–¥—ã'
            },
            {
                'company_name': '–ü–ê–û "–£—Ä–∞–ª—å—Å–∫–∏–µ –Ω–µ–¥—Ä–∞"',
                'region': '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                'inn_or_ogrn': '3456789012',
                'equipment_types': ['–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã', '–î—Ä—É–≥–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'],
                'mining_operations': ['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–°–∫–ª–∞–¥—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'],
                'service_history': '–†–∞–±–æ—Ç–∞ —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏ –∏ –∫–∞–º–Ω—è–º–∏'
            }
        ]
        
        created_profiles = []
        for i, user in enumerate(customer_users):
            if i < len(companies):
                company_data = companies[i]
            else:
                company_data = {
                    'company_name': f'–û–û–û "{fake.company()}"',
                    'region': fake.region(),
                    'inn_or_ogrn': fake.numerify('##########'),
                    'equipment_brands': random.sample(['–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä', '–≠–ø–∏—Ä–æ–≥', '–ö–∞—Ç–µ—Ä–ø–∏–ª–ª–∞—Ä', '–ö–æ–º–ø–∞–Ω–∏'], 2),
                    'equipment_types': random.sample(['–ë—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏', '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã', '–°–∞–º–æ—Å–≤–∞–ª—ã'], 2),
                    'mining_operations': random.sample(['–ì–µ–æ–ª–æ–≥–æ—Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–û—Ç–∫—Ä—ã—Ç—ã–µ –≥–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã'], 1),
                    'service_history': fake.text(max_nb_chars=200)
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            existing_profile = db.query(CustomerProfile).filter(
                CustomerProfile.user_id == user.id
            ).first()
            
            if existing_profile:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è {user.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                created_profiles.append(existing_profile)
                continue
            
            profile = CustomerProfile(
                user_id=user.id,
                company_name=company_data['company_name'],
                contact_person=f"{user.first_name} {user.last_name}",
                phone=user.phone,
                email=user.email,
                address=f"{company_data['region']}, {fake.address()}",
                inn=company_data['inn_or_ogrn'][:10] if len(company_data['inn_or_ogrn']) >= 10 else company_data['inn_or_ogrn'],
                ogrn=company_data['inn_or_ogrn'],
                equipment_brands=company_data['equipment_brands'],
                equipment_types=company_data['equipment_types'],
                mining_operations=company_data['mining_operations'],
                service_history=company_data['service_history']
            )
            
            db.add(profile)
            created_profiles.append(profile)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞: {company_data['company_name']}")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤")
        return created_profiles
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {e}")
        return []
    finally:
        db.close()

def create_contractor_profiles(users):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    db = SessionLocal()
    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        
        contractor_users = [u for u in users if u.role == UserRole.CONTRACTOR]
        specializations_list = [
            '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', '–ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞', '–•–æ–¥–æ–≤–∞—è —á–∞—Å—Ç—å', '–î–≤–∏–≥–∞—Ç–µ–ª–∏',
            '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è', '–°–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞', '–°–≤–∞—Ä–∫–∞',
            '–ú–µ—Ö–∞–Ω–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'
        ]
        
        equipment_brands = [
            '–ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä', '–≠–ø–∏—Ä–æ–≥', '–ë–æ—Ä—Ç–ª–∞–Ω–≥–∏—Ä', '–ö–∞—Ç–µ—Ä–ø–∏–ª–ª–∞—Ä',
            '–ö–æ–º–ø–∞–Ω–∏', '–õ–∏–±—Ö–µ—Ä—Ä', '–í–æ–ª—å–≤–æ'
        ]
        
        certifications = [
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–≤–∞—Ä—â–∏–∫–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —ç–ª–µ–∫—Ç—Ä–∏–∫–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞',
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏'
        ]
        
        work_regions = [
            '–ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –æ–±–ª–∞—Å—Ç—å', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
            '–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥', '–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'
        ]
        
        created_profiles = []
        for user in contractor_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            existing_profile = db.query(ContractorProfile).filter(
                ContractorProfile.user_id == user.id
            ).first()
            
            if existing_profile:
                print(f"  ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è {user.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                created_profiles.append(existing_profile)
                continue
            
            profile = ContractorProfile(
                user_id=user.id,
                first_name=user.first_name,
                last_name=user.last_name,
                patronymic=user.middle_name,
                phone=user.phone,
                email=user.email,
                specializations=random.sample(specializations_list, random.randint(2, 4)),
                equipment_brands_experience=random.sample(equipment_brands, random.randint(2, 4)),
                certifications=random.sample(certifications, random.randint(1, 3)),
                work_regions=random.sample(work_regions, random.randint(1, 3)),
                hourly_rate=random.randint(1500, 5000),
                telegram_username=f"@{user.username}",
                general_description=fake.text(max_nb_chars=500),
                professional_info=fake.text(max_nb_chars=300),
                education=fake.text(max_nb_chars=200),
                availability_status=random.choice(['available', 'busy', 'unavailable'])
            )
            
            db.add(profile)
            created_profiles.append(profile)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {user.first_name} {user.last_name}")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        return created_profiles
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        db.close()

def create_repair_requests(users, customer_profiles):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"""
    db = SessionLocal()
    try:
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç...")
        
        managers = [u for u in users if u.role == UserRole.MANAGER]
        customers = [p for p in customer_profiles]
        
        if not managers or not customers:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫")
            return []
        
        request_templates = [
            {
                'title': '–†–µ–º–æ–Ω—Ç –±—É—Ä–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –±—É—Ä–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ –º–∞—Å–ª–∞ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è.',
                'equipment_type': '–ë—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏',
                'priority': 'high',
                'urgency': 'urgent'
            },
            {
                'title': '–ó–∞–º–µ–Ω–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞',
                'description': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∑–∞–º–µ–Ω–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è Caterpillar 320D. –î–≤–∏–≥–∞—Ç–µ–ª—å –≤—ã—Ä–∞–±–æ—Ç–∞–ª —Ä–µ—Å—É—Ä—Å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.',
                'equipment_type': '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä—ã',
                'priority': 'medium',
                'urgency': 'normal'
            },
            {
                'title': '–†–µ–º–æ–Ω—Ç —Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏ —Å–∞–º–æ—Å–≤–∞–ª–∞',
                'description': '–ü—Ä–æ–±–ª–µ–º—ã —Å —Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç—å—é —Å–∞–º–æ—Å–≤–∞–ª–∞ Volvo. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –ø–æ–¥—à–∏–ø–Ω–∏–∫–æ–≤ –∏ —Ä–µ–º–æ–Ω—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.',
                'equipment_type': '–°–∞–º–æ—Å–≤–∞–ª—ã',
                'priority': 'high',
                'urgency': 'urgent'
            },
            {
                'title': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≥—Ä—É–∑—á–∏–∫–æ–º. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
                'equipment_type': '–ü–æ–≥—Ä—É–∑—á–∏–∫–∏',
                'priority': 'medium',
                'urgency': 'normal'
            },
            {
                'title': '–†–µ–º–æ–Ω—Ç –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞',
                'description': '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –Ω–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.',
                'equipment_type': '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã',
                'priority': 'low',
                'urgency': 'normal'
            },
            {
                'title': '–ó–∞–º–µ–Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–æ–≤',
                'description': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –≥–∏–¥—Ä–æ—Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –ø–æ–¥—ä–µ–º–∞ —Å—Ç—Ä–µ–ª—ã –∫—Ä–∞–Ω–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ—á—å –≤ —É–ø–ª–æ—Ç–Ω–µ–Ω–∏—è—Ö.',
                'equipment_type': '–ö—Ä–∞–Ω—ã',
                'priority': 'medium',
                'urgency': 'urgent'
            }
        ]
        
        statuses = [
            RequestStatus.NEW,
            RequestStatus.MANAGER_REVIEW,
            RequestStatus.CLARIFICATION,
            RequestStatus.SENT_TO_CONTRACTORS,
            RequestStatus.CONTRACTOR_RESPONSES,
            RequestStatus.ASSIGNED,
            RequestStatus.IN_PROGRESS,
            RequestStatus.COMPLETED,
            RequestStatus.CANCELLED
        ]
        
        created_requests = []
        for i in range(20):  # –°–æ–∑–¥–∞–µ–º 20 –∑–∞—è–≤–æ–∫
            template = random.choice(request_templates)
            customer = random.choice(customers)
            manager = random.choice(managers)
            status = random.choice(statuses)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            created_date = fake.date_time_between(start_date='-30d', end_date='now')
            
            request = RepairRequest(
                customer_id=customer.id,
                manager_id=manager.id,
                title=template['title'],
                description=template['description'],
                equipment_type=template['equipment_type'],
                location=fake.city(),
                priority=template['priority'],
                urgency=template['urgency'],
                status=status,
                estimated_cost=random.randint(50000, 500000),
                created_at=created_date,
                updated_at=created_date
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status in [RequestStatus.ASSIGNED, RequestStatus.IN_PROGRESS, RequestStatus.COMPLETED]:
                contractors = [u for u in users if u.role == UserRole.CONTRACTOR]
                if contractors:
                    request.assigned_contractor_id = random.choice(contractors).id
                    request.assigned_at = created_date + timedelta(days=random.randint(1, 5))
            
            if status == RequestStatus.COMPLETED:
                request.completed_at = created_date + timedelta(days=random.randint(5, 15))
                request.final_cost = random.randint(40000, 600000)
            
            if status in [RequestStatus.CLARIFICATION, RequestStatus.MANAGER_REVIEW]:
                request.manager_comment = fake.text(max_nb_chars=200)
            
            db.add(request)
            created_requests.append(request)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {template['title']} (—Å—Ç–∞—Ç—É—Å: {status})")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
        return created_requests
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []
    finally:
        db.close()

def create_contractor_responses(users, repair_requests):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –∑–∞—è–≤–∫–∏"""
    db = SessionLocal()
    try:
        print("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        
        contractor_profiles = db.query(ContractorProfile).all()
        
        if not contractor_profiles or not repair_requests:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
            return []
        
        created_responses = []
        for request in repair_requests[:10]:  # –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–µ—Ä–≤—ã–µ 10 –∑–∞—è–≤–æ–∫
            # –°–æ–∑–¥–∞–µ–º 1-3 –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É
            num_responses = random.randint(1, 3)
            responding_profiles = random.sample(contractor_profiles, min(num_responses, len(contractor_profiles)))
            
            for profile in responding_profiles:
                response = ContractorResponse(
                    request_id=request.id,
                    contractor_id=profile.id,
                    proposed_cost=random.randint(30000, 400000),
                    estimated_duration_days=random.randint(1, 30),
                    message=fake.text(max_nb_chars=300),
                    is_accepted=random.choice([True, False, None])  # True, False, –∏–ª–∏ None (–Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ)
                )
                
                db.add(response)
                created_responses.append(response)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–≤–µ—Ç –æ—Ç {profile.first_name} {profile.last_name} –Ω–∞ –∑–∞—è–≤–∫—É #{request.id}")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_responses)} –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        return created_responses
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        db.close()

def create_security_verifications(users):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    db = SessionLocal()
    try:
        print("üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        contractor_profiles = db.query(ContractorProfile).all()
        security_users = [u for u in users if u.role == UserRole.SECURITY]
        
        if not contractor_profiles or not security_users:
            print("  ‚ö†Ô∏è  –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π")
            return []
        
        verification_statuses = ['pending', 'approved', 'rejected', 'under_review']
        
        created_verifications = []
        for profile in contractor_profiles:
            status = random.choice(verification_statuses)
            security_user = random.choice(security_users)
            
            verification = SecurityVerification(
                contractor_id=profile.id,
                verification_status=status,
                verification_notes=fake.text(max_nb_chars=200),
                checked_by=security_user.id if status in ['approved', 'rejected'] else None,
                checked_at=fake.date_time_between(start_date='-30d', end_date='now') if status in ['approved', 'rejected'] else None
            )
            
            db.add(verification)
            created_verifications.append(verification)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {profile.first_name} {profile.last_name} (—Å—Ç–∞—Ç—É—Å: {status})")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_verifications)} –∑–∞–ø–∏—Å–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return created_verifications
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")
        return []
    finally:
        db.close()

def create_hr_documents(users):
    """–°–æ–∑–¥–∞–Ω–∏–µ HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    db = SessionLocal()
    try:
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        hr_users = [u for u in users if u.role == UserRole.HR]
        contractor_profiles = db.query(ContractorProfile).all()
        
        if not hr_users or not contractor_profiles:
            print("  ‚ö†Ô∏è  –ù–µ—Ç HR –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return []
        
        document_types = [
            '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
            '–°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö',
            '–°–ø—Ä–∞–≤–∫–∞ –æ —Å—Ç–∞–∂–µ',
            '–°–ø—Ä–∞–≤–∫–∞ –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞',
            '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–∏'
        ]
        
        created_documents = []
        for profile in contractor_profiles:
            num_docs = random.randint(1, 3)
            hr_user = random.choice(hr_users)
            
            for _ in range(num_docs):
                doc_type = random.choice(document_types)
                document = HRDocument(
                    contractor_id=profile.id,
                    document_type=doc_type,
                    document_path=f"/documents/{profile.id}/{doc_type.lower().replace(' ', '_')}.pdf",
                    document_status=random.choice(['draft', 'generated', 'sent', 'signed']),
                    generated_by=hr_user.id,
                    generated_at=fake.date_time_between(start_date='-30d', end_date='now')
                )
                
                db.add(document)
                created_documents.append(document)
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {doc_type} –¥–ª—è {profile.first_name} {profile.last_name}")
        
        db.commit()
        print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {len(created_documents)} HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return created_documents
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return []
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = create_test_users()
    if not users:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    customer_profiles = create_customer_profiles(users)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    contractor_profiles = create_contractor_profiles(users)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç
    repair_requests = create_repair_requests(users, customer_profiles)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    contractor_responses = create_contractor_responses(users, repair_requests)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_verifications = create_security_verifications(users)
    
    # –°–æ–∑–¥–∞–µ–º HR –¥–æ–∫—É–º–µ–Ω—Ç—ã
    hr_documents = create_hr_documents(users)
    
    print("=" * 60)
    print("üéâ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print(f"  üè¢ –ü—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {len(customer_profiles)}")
    print(f"  üîß –ü—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(contractor_profiles)}")
    print(f"  üìã –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {len(repair_requests)}")
    print(f"  üí¨ –û—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(contractor_responses)}")
    print(f"  üõ°Ô∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(security_verifications)}")
    print(f"  üìÑ HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(hr_documents)}")
    print("=" * 60)
    print("üîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print("  admin / admin123 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    print("  manager1 / password123 - –ú–µ–Ω–µ–¥–∂–µ—Ä")
    print("  customer1 / password123 - –ó–∞–∫–∞–∑—á–∏–∫")
    print("  contractor1 / password123 - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    print("  engineer1 / password123 - –°–µ—Ä–≤–∏—Å–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä")
    print("  security1 / password123 - –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("  hr1 / password123 - HR")
    print("=" * 60)

if __name__ == "__main__":
    main()
