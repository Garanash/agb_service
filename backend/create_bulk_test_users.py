"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
"""
import os
import sys
from datetime import datetime, timezone
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from passlib.context import CryptContext

# Add the backend directory to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__))))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database import Base, get_db
from models import User, ContractorProfile, CustomerProfile

# Database setup
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://agregator_user:agregator_password_2024@localhost:5432/agregator_db")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def delete_user_by_email(email: str):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    db = next(get_db_session())
    
    try:
        user = db.query(User).filter(User.email == email).first()
        if user:
            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email}")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            if user.role == "contractor":
                contractor_profile = db.query(ContractorProfile).filter(ContractorProfile.user_id == user.id).first()
                if contractor_profile:
                    db.delete(contractor_profile)
            
            if user.role == "customer":
                customer_profile = db.query(CustomerProfile).filter(CustomerProfile.user_id == user.id).first()
                if customer_profile:
                    db.delete(customer_profile)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.delete(user)
            db.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É–¥–∞–ª–µ–Ω")
            return True
        else:
            print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def create_test_users():
    """–°–æ–∑–¥–∞–µ—Ç 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db = next(get_db_session())
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    users_data = [
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (contractors)
        {"username": "contractor1", "email": "contractor1@test.com", "role": "contractor", "first_name": "–ò–≤–∞–Ω", "last_name": "–ü–µ—Ç—Ä–æ–≤"},
        {"username": "contractor2", "email": "contractor2@test.com", "role": "contractor", "first_name": "–ü–µ—Ç—Ä", "last_name": "–°–∏–¥–æ—Ä–æ–≤"},
        {"username": "contractor3", "email": "contractor3@test.com", "role": "contractor", "first_name": "–ê–ª–µ–∫—Å–µ–π", "last_name": "–ò–≤–∞–Ω–æ–≤"},
        {"username": "contractor4", "email": "contractor4@test.com", "role": "contractor", "first_name": "–°–µ—Ä–≥–µ–π", "last_name": "–ö–æ–∑–ª–æ–≤"},
        {"username": "contractor5", "email": "contractor5@test.com", "role": "contractor", "first_name": "–ú–∏—Ö–∞–∏–ª", "last_name": "–°–º–∏—Ä–Ω–æ–≤"},
        {"username": "contractor6", "email": "contractor6@test.com", "role": "contractor", "first_name": "–î–º–∏—Ç—Ä–∏–π", "last_name": "–í–æ–ª–∫–æ–≤"},
        {"username": "contractor7", "email": "contractor7@test.com", "role": "contractor", "first_name": "–ê–Ω–¥—Ä–µ–π", "last_name": "–ú–µ–¥–≤–µ–¥–µ–≤"},
        {"username": "contractor8", "email": "contractor8@test.com", "role": "contractor", "first_name": "–í–ª–∞–¥–∏–º–∏—Ä", "last_name": "–ï–≥–æ—Ä–æ–≤"},
        {"username": "contractor9", "email": "contractor9@test.com", "role": "contractor", "first_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "last_name": "–ù–æ–≤–∏–∫–æ–≤"},
        {"username": "contractor10", "email": "contractor10@test.com", "role": "contractor", "first_name": "–ù–∏–∫–æ–ª–∞–π", "last_name": "–°–æ–∫–æ–ª–æ–≤"},
        
        # –ó–∞–∫–∞–∑—á–∏–∫–∏ (customers)
        {"username": "customer1", "email": "customer1@test.com", "role": "customer", "first_name": "–û–û–û", "last_name": "–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞"},
        {"username": "customer2", "email": "customer2@test.com", "role": "customer", "first_name": "–û–ê–û", "last_name": "–°–∏–ª—å–Ω—ã–µ –ì–æ—Ä—ã"},
        {"username": "customer3", "email": "customer3@test.com", "role": "customer", "first_name": "–ó–ê–û", "last_name": "–°–µ–≤–µ—Ä–Ω—ã–π –†—É–±–µ–∂"},
        {"username": "customer4", "email": "customer4@test.com", "role": "customer", "first_name": "–ò–ü", "last_name": "–ì–æ—Ä–Ω–æ–µ –î–µ–ª–æ"},
        {"username": "customer5", "email": "customer5@test.com", "role": "customer", "first_name": "–û–û–û", "last_name": "–ì–µ–æ–°—Ç—Ä–æ–π"},
        
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        {"username": "security1", "email": "security1@test.com", "role": "security", "first_name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "last_name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫1"},
        
        # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ HR
        {"username": "hr1", "email": "hr1@test.com", "role": "hr", "first_name": "HR", "last_name": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫1"},
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        {"username": "manager1", "email": "manager1@test.com", "role": "manager", "first_name": "–ú–µ–Ω–µ–¥–∂–µ—Ä", "last_name": "–û–¥–∏–Ω"},
        
        # –ï—â–µ 2 –∑–∞–∫–∞–∑—á–∏–∫–∞
        {"username": "customer6", "email": "customer6@test.com", "role": "customer", "first_name": "–û–û–û", "last_name": "–¢–æ–ø –°—Ç—Ä–æ–π"},
        {"username": "customer7", "email": "customer7@test.com", "role": "customer", "first_name": "–û–û–û", "last_name": "–ì–æ—Ä–Ω—ã–π –ü—Ä–æ—Å–ø–µ–∫—Ç"},
    ]
    
    created_count = 0
    
    for user_data in users_data:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.email == user_data["email"]).first()
            if existing_user:
                print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            hashed_password = pwd_context.hash("password123")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                username=user_data["username"],
                email=user_data["email"],
                password=hashed_password,
                role=user_data["role"],
                first_name=user_data["first_name"],
                last_name=user_data["last_name"],
                is_active=True,
                is_password_changed=False,
                email_verified=True,
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc)
            )
            
            db.add(new_user)
            db.commit()
            db.refresh(new_user)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            if user_data["role"] == "contractor":
                contractor_profile = ContractorProfile(
                    user_id=new_user.id,
                    first_name=user_data["first_name"],
                    last_name=user_data["last_name"],
                    phone=f"+7(999)000-{created_count + 1:02d}-{created_count + 2:02d}",
                    email=user_data["email"],
                    telegram_username=f"test_contractor_{created_count + 1}" if created_count < 5 else None,
                    availability_status="available" if created_count % 2 == 0 else "busy"
                )
                db.add(contractor_profile)
            
            if user_data["role"] == "customer":
                customer_profile = CustomerProfile(
                    user_id=new_user.id,
                    company_name=user_data["last_name"],
                    contact_person=user_data["first_name"],
                    phone=f"+7(999)100-{created_count + 1:02d}-{created_count + 2:02d}",
                    email=user_data["email"],
                    address="–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1"
                )
                db.add(customer_profile)
            
            db.commit()
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} ({user_data['email']})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['email']}: {e}")
            db.rollback()
    
    print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created_count}")
    print(f"\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∞—Ä–æ–ª—å 'password123'):")
    print("\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:")
    for user_data in users_data[:10]:
        print(f"  - {user_data['username']} ({user_data['email']})")
    
    print("\n–ó–∞–∫–∞–∑—á–∏–∫–∏:")
    for user_data in users_data[10:15]:
        print(f"  - {user_data['username']} ({user_data['email']})")
    
    print("\n–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏:")
    for user_data in users_data[15:]:
        print(f"  - {user_data['username']} ({user_data['email']}) - {user_data['role']}")
    
    db.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
    parser.add_argument('--delete-email', type=str, help='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email')
    parser.add_argument('--create', action='store_true', help='–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    args = parser.parse_args()
    
    if args.delete_email:
        delete_user_by_email(args.delete_email)
    elif args.create:
        create_test_users()
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python create_bulk_test_users.py --delete-email user@example.com  # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  python create_bulk_test_users.py --create  # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

