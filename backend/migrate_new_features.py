#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä
- –ù–æ–≤—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (MANAGER, SECURITY, HR)
- –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
- –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
- –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import ProgrammingError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit(1)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def run_migration():
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –ê–ª–º–∞–∑–≥–µ–æ–±—É—Ä...")
    db = SessionLocal()
    
    try:
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫...")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            db.execute(text("""
                ALTER TABLE repair_requests 
                DROP CONSTRAINT IF EXISTS repair_requests_status_check
            """))
            db.execute(text("""
                ALTER TABLE repair_requests 
                ADD CONSTRAINT repair_requests_status_check 
                CHECK (status IN ('new', 'manager_review', 'clarification', 'sent_to_contractors', 
                                'contractor_responses', 'assigned', 'in_progress', 'completed', 'cancelled'))
            """))
            db.commit()
            print("‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            db.rollback()
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ customer_profiles
        print("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≥–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤...")
        new_customer_fields = [
            "equipment_brands JSON",
            "equipment_types JSON", 
            "mining_operations JSON",
            "service_history TEXT"
        ]
        
        for field in new_customer_fields:
            field_name = field.split()[0]
            field_type = field.split()[1]
            try:
                db.execute(text(f"ALTER TABLE customer_profiles ADD COLUMN {field_name} {field_type}"))
                db.commit()
                print(f"‚úÖ –ü–æ–ª–µ {field_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ customer_profiles")
            except ProgrammingError as e:
                db.rollback()
                if "already exists" in str(e):
                    print(f"–ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ customer_profiles")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ contractor_profiles
        print("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
        new_contractor_fields = [
            "specializations JSON",
            "equipment_brands_experience JSON",
            "certifications JSON", 
            "work_regions JSON",
            "hourly_rate FLOAT",
            "availability_status VARCHAR(50) DEFAULT 'available'"
        ]
        
        for field in new_contractor_fields:
            field_name = field.split()[0]
            field_definition = field
            try:
                db.execute(text(f"ALTER TABLE contractor_profiles ADD COLUMN {field_definition}"))
                db.commit()
                print(f"‚úÖ –ü–æ–ª–µ {field_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ contractor_profiles")
            except ProgrammingError as e:
                db.rollback()
                if "already exists" in str(e):
                    print(f"–ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ contractor_profiles")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ repair_requests
        print("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è workflow –≤ –∑–∞—è–≤–∫–∏...")
        new_request_fields = [
            "priority VARCHAR(50) DEFAULT 'normal'",
            "clarification_details TEXT",
            "scheduled_date TIMESTAMP",
            "manager_id INTEGER REFERENCES users(id)"
        ]
        
        for field in new_request_fields:
            field_name = field.split()[0]
            field_definition = field
            try:
                db.execute(text(f"ALTER TABLE repair_requests ADD COLUMN {field_definition}"))
                db.commit()
                print(f"‚úÖ –ü–æ–ª–µ {field_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ repair_requests")
            except ProgrammingError as e:
                db.rollback()
                if "already exists" in str(e):
                    print(f"–ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ repair_requests")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {field_name}: {e}")

        # 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É security_verifications
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        try:
            db.execute(text("""
                CREATE TABLE security_verifications (
                    id SERIAL PRIMARY KEY,
                    contractor_id INTEGER NOT NULL REFERENCES contractor_profiles(id),
                    verification_status VARCHAR(50) NOT NULL DEFAULT 'pending',
                    verification_notes TEXT,
                    checked_by INTEGER REFERENCES users(id),
                    checked_at TIMESTAMP WITH TIME ZONE,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                )
            """))
            db.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ security_verifications —Å–æ–∑–¥–∞–Ω–∞")
        except ProgrammingError as e:
            db.rollback()
            if "already exists" in str(e):
                print("–¢–∞–±–ª–∏—Ü–∞ security_verifications —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ security_verifications: {e}")

        # 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É hr_documents
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É HR –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        try:
            db.execute(text("""
                CREATE TABLE hr_documents (
                    id SERIAL PRIMARY KEY,
                    contractor_id INTEGER NOT NULL REFERENCES contractor_profiles(id),
                    document_type VARCHAR(200) NOT NULL,
                    document_status VARCHAR(50) NOT NULL DEFAULT 'pending',
                    generated_by INTEGER REFERENCES users(id),
                    generated_at TIMESTAMP WITH TIME ZONE,
                    document_path VARCHAR(500),
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                )
            """))
            db.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ hr_documents —Å–æ–∑–¥–∞–Ω–∞")
        except ProgrammingError as e:
            db.rollback()
            if "already exists" in str(e):
                print("–¢–∞–±–ª–∏—Ü–∞ hr_documents —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ hr_documents: {e}")

        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_security_verifications_contractor_id ON security_verifications(contractor_id)",
            "CREATE INDEX IF NOT EXISTS idx_security_verifications_status ON security_verifications(verification_status)",
            "CREATE INDEX IF NOT EXISTS idx_hr_documents_contractor_id ON hr_documents(contractor_id)",
            "CREATE INDEX IF NOT EXISTS idx_hr_documents_status ON hr_documents(document_status)",
            "CREATE INDEX IF NOT EXISTS idx_repair_requests_manager_id ON repair_requests(manager_id)",
            "CREATE INDEX IF NOT EXISTS idx_repair_requests_status ON repair_requests(status)"
        ]
        
        for index_sql in indexes:
            try:
                db.execute(text(index_sql))
                db.commit()
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {index_sql.split()[-1]}")
            except Exception as e:
                db.rollback()
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")

        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    finally:
        db.close()

if __name__ == "__main__":
    run_migration()
