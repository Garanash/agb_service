"""
–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API
"""
import os
import logging
import smtplib
import json
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class RealEmailService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã"""
        self.from_email = os.getenv("MAIL_FROM", "almazgeobur@mail.ru")
        self.from_name = os.getenv("MAIL_FROM_NAME", "AGB SERVICE")
        self.smtp_server = os.getenv("MAIL_SERVER", "smtp.mail.ru")
        self.smtp_port = int(os.getenv("MAIL_PORT", "587"))
        self.username = os.getenv("MAIL_USERNAME", "almazgeobur@mail.ru")
        self.password = os.getenv("MAIL_PASSWORD", "")
        self.use_tls = os.getenv("MAIL_TLS", "true").lower() == "true"
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.sendgrid_api_key = os.getenv("SENDGRID_API_KEY", "")
        self.mailgun_api_key = os.getenv("MAILGUN_API_KEY", "")
        self.mailgun_domain = os.getenv("MAILGUN_DOMAIN", "")
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        self.mailru_api_key = os.getenv("MAILRU_API_KEY", "")
        self.mailru_domain = os.getenv("MAILRU_DOMAIN", "")
        self.yandex_api_key = os.getenv("YANDEX_API_KEY", "")
        self.yandex_domain = os.getenv("YANDEX_DOMAIN", "")
        self.unisender_api_key = os.getenv("UNISENDER_API_KEY", "")
        self.sendpulse_api_key = os.getenv("SENDPULSE_API_KEY", "")
        self.sendpulse_secret = os.getenv("SENDPULSE_SECRET", "")

    def send_email_via_smtp(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = f"{self.from_name} <{self.from_email}>"
            msg['To'] = to_email

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            if plain_text:
                text_part = MIMEText(plain_text, 'plain', 'utf-8')
                msg.attach(text_part)

            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)

            logger.info(f"üìß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {self.smtp_server}:{self.smtp_port}")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
            if self.use_tls:
                server = smtplib.SMTP(self.smtp_server, self.smtp_port)
                server.starttls()
            else:
                server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port)

            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            logger.info(f"üìß –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ {self.username}")
            server.login(self.username, self.password)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ {to_email}")
            server.send_message(msg)
            server.quit()

            logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMTP –Ω–∞ {to_email}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SMTP –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_sendgrid(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SendGrid API"""
        if not self.sendgrid_api_key:
            logger.warning("‚ö†Ô∏è SendGrid API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            url = "https://api.sendgrid.com/v3/mail/send"
            headers = {
                "Authorization": f"Bearer {self.sendgrid_api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "personalizations": [{"to": [{"email": to_email}]}],
                "from": {"email": self.from_email, "name": self.from_name},
                "subject": subject,
                "content": [
                    {"type": "text/plain", "value": plain_text or html_content},
                    {"type": "text/html", "value": html_content}
                ]
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SendGrid –Ω–∞ {to_email}")
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 202:
                logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SendGrid –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ SendGrid: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SendGrid –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_mailgun(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Mailgun API"""
        if not self.mailgun_api_key or not self.mailgun_domain:
            logger.warning("‚ö†Ô∏è Mailgun API –∫–ª—é—á –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            url = f"https://api.mailgun.net/v3/{self.mailgun_domain}/messages"
            auth = ("api", self.mailgun_api_key)
            
            data = {
                "from": f"{self.from_name} <{self.from_email}>",
                "to": to_email,
                "subject": subject,
                "html": html_content,
                "text": plain_text or html_content
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mailgun –Ω–∞ {to_email}")
            response = requests.post(url, auth=auth, data=data)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Mailgun –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Mailgun: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Mailgun –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_mailru(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Mail.ru Cloud Solutions API"""
        if not self.mailru_api_key or not self.mailru_domain:
            logger.warning("‚ö†Ô∏è Mail.ru API –∫–ª—é—á –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            url = f"https://api.mail.ru/v1/{self.mailru_domain}/messages"
            headers = {
                "Authorization": f"Bearer {self.mailru_api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "from": {"email": self.from_email, "name": self.from_name},
                "to": [{"email": to_email}],
                "subject": subject,
                "html": html_content,
                "text": plain_text or html_content
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mail.ru –Ω–∞ {to_email}")
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Mail.ru –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Mail.ru: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Mail.ru –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_yandex(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Yandex.Cloud Mail API"""
        if not self.yandex_api_key or not self.yandex_domain:
            logger.warning("‚ö†Ô∏è Yandex API –∫–ª—é—á –∏–ª–∏ –¥–æ–º–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            url = f"https://mail-api.yandexcloud.net/v1/{self.yandex_domain}/messages"
            headers = {
                "Authorization": f"Bearer {self.yandex_api_key}",
                "Content-Type": "application/json"
            }
            
            data = {
                "from": {"email": self.from_email, "name": self.from_name},
                "to": [{"email": to_email}],
                "subject": subject,
                "html": html_content,
                "text": plain_text or html_content
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Yandex –Ω–∞ {to_email}")
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Yandex –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Yandex: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Yandex –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_unisender(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ Unisender API"""
        if not self.unisender_api_key:
            logger.warning("‚ö†Ô∏è Unisender API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            url = "https://api.unisender.com/ru/api/sendEmail"
            data = {
                "api_key": self.unisender_api_key,
                "email": to_email,
                "sender_name": self.from_name,
                "sender_email": self.from_email,
                "subject": subject,
                "body": html_content,
                "text_body": plain_text or html_content
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Unisender –Ω–∞ {to_email}")
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                result = response.json()
                if result.get("result", {}).get("email_id"):
                    logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Unisender –Ω–∞ {to_email}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Unisender: {result}")
                    return False
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Unisender: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Unisender –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_sendpulse(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ SendPulse API"""
        if not self.sendpulse_api_key or not self.sendpulse_secret:
            logger.warning("‚ö†Ô∏è SendPulse API –∫–ª—é—á –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            auth_url = "https://api.sendpulse.com/oauth/access_token"
            auth_data = {
                "grant_type": "client_credentials",
                "client_id": self.sendpulse_api_key,
                "client_secret": self.sendpulse_secret
            }
            
            auth_response = requests.post(auth_url, data=auth_data)
            if auth_response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ SendPulse: {auth_response.text}")
                return False
                
            access_token = auth_response.json().get("access_token")
            if not access_token:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ SendPulse")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            url = "https://api.sendpulse.com/smtp/emails"
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json"
            }
            
            data = {
                "email": {
                    "subject": subject,
                    "html": html_content,
                    "text": plain_text or html_content,
                    "from": {"name": self.from_name, "email": self.from_email},
                    "to": [{"email": to_email}]
                }
            }
            
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SendPulse –Ω–∞ {to_email}")
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SendPulse –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ SendPulse: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SendPulse –Ω–∞ {to_email}: {e}")
            return False

    def send_email_via_webhook(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã ‚Üí –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ ‚Üí SMTP ‚Üí —Ñ–∞–π–ª
        """
        # 1. –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if self.send_email_via_mailru(to_email, subject, html_content, plain_text):
            return True
        
        if self.send_email_via_yandex(to_email, subject, html_content, plain_text):
            return True
            
        if self.send_email_via_unisender(to_email, subject, html_content, plain_text):
            return True
            
        if self.send_email_via_sendpulse(to_email, subject, html_content, plain_text):
            return True
        
        # 2. –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        if self.send_email_via_sendgrid(to_email, subject, html_content, plain_text):
            return True
        
        if self.send_email_via_mailgun(to_email, subject, html_content, plain_text):
            return True
        
        # 3. –ü—Ä–æ–±—É–µ–º SMTP
        if self.send_email_via_smtp(to_email, subject, html_content, plain_text):
            return True
        
        # 4. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        logger.warning(f"‚ö†Ô∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è {to_email}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª")
        return self._save_email_to_file(to_email, subject, html_content, plain_text)

    def _save_email_to_file(self, to_email: str, subject: str, html_content: str, plain_text: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            email_data = {
                'to': to_email,
                'subject': subject,
                'html': html_content,
                'text': plain_text,
                'from': self.from_email,
                'from_name': self.from_name,
                'timestamp': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('/tmp/sent_emails.json', 'a', encoding='utf-8') as f:
                f.write(json.dumps(email_data, ensure_ascii=False, indent=2) + '\n')
            
            logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª –¥–ª—è {to_email}")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ —Ñ–∞–π–ª: {e}")
            return False

    def send_welcome_email(self, user_email: str, user_name: str, user_role: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            role_text = {
                "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "customer": "–ó–∞–∫–∞–∑—á–∏–∫", 
                "contractor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                "service_engineer": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            }.get(user_role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            # HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background: #f5f5f5; color: #333; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; border: 1px solid #ddd; }}
                    .content {{ background: #fff; padding: 30px; border-radius: 0 0 10px 10px; border: 1px solid #ddd; border-top: none; }}
                    .logo {{ font-size: 24px; font-weight: bold; margin-bottom: 10px; }}
                    .welcome-text {{ font-size: 18px; margin-bottom: 20px; }}
                    .user-info {{ background: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #1976d2; }}
                    .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
                    .button {{ display: inline-block; background: #1976d2; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <div class="logo">AGB SERVICE</div>
                        <div>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!</div>
                    </div>
                    <div class="content">
                        <div class="welcome-text">
                            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!
                        </div>
                        
                        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ AGB SERVICE! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.</p>
                        
                        <div class="user-info">
                            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:</h3>
                            <p><strong>Email:</strong> {user_email}</p>
                            <p><strong>–†–æ–ª—å:</strong> {role_text}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π</p>
                        </div>
                        
                        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                        <ul>
                            {"<li>–°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏</li><li>–ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</li><li>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫</li>" if user_role == 'customer' else "<li>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏</li><li>–û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</li><li>–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º</li>" if user_role in ['contractor', 'service_engineer'] else ""}
                        </ul>
                        
                        <div style="text-align: center;">
                            <a href="http://91.222.236.58:3000/login" class="button">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
                        </div>
                        
                        <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
                        
                        <div class="footer">
                            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ AGB SERVICE</p>
                            <p>¬© 2025 Neurofork. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                        </div>
                    </div>
                </div>
            </body>
            </html>
            """

            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            plain_text = f"""
AGB SERVICE
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ AGB SERVICE! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:
Email: {user_email}
–†–æ–ª—å: {role_text}
–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ –∞–¥—Ä–µ—Å—É: http://91.222.236.58:3000/login
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ AGB SERVICE
¬© 2025 Neurofork. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            success = self.send_email_via_webhook(
                to_email=user_email,
                subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AGB SERVICE!",
                html_content=html_content,
                plain_text=plain_text
            )
            
            if success:
                logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}")
            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ {user_email}: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
real_email_service = RealEmailService()