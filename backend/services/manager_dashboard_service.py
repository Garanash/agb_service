"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
"""

import logging
from typing import Dict, List, Any, Optional
from datetime import datetime, timezone, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import func, and_, or_
from models import RepairRequest, User, RequestStatus, ContractorProfile, CustomerProfile

logger = logging.getLogger(__name__)

class ManagerDashboardService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_dashboard_stats(self, manager_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞—è–≤–æ–∫
        status_stats = self.db.query(
            RepairRequest.status,
            func.count(RepairRequest.id).label('count')
        ).filter(
            RepairRequest.manager_id == manager_id
        ).group_by(RepairRequest.status).all()
        
        status_counts = {status: count for status, count in status_stats}
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        total_requests = sum(status_counts.values()) if status_counts else 0
        
        # –ó–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now(timezone.utc) - timedelta(days=30)
        recent_requests = self.db.query(RepairRequest).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                RepairRequest.created_at >= thirty_days_ago
            )
        ).count()
        
        # –ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now(timezone.utc).date()
        today_requests = self.db.query(RepairRequest).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                func.date(RepairRequest.created_at) == today
            )
        ).count()
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
        completed_requests = self.db.query(RepairRequest).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                RepairRequest.status == "completed",
                RepairRequest.processed_at.isnot(None),
                RepairRequest.assigned_at.isnot(None)
            )
        ).all()
        
        avg_processing_time = 0
        if completed_requests:
            total_time = sum([
                (req.assigned_at - req.processed_at).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
                for req in completed_requests
                if req.processed_at and req.assigned_at
            ])
            avg_processing_time = total_time / len(completed_requests)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        active_contractors = self.db.query(ContractorProfile).join(User, ContractorProfile.user_id == User.id).filter(
            and_(
                User.role == 'contractor',
                User.is_active == True,
                ContractorProfile.availability_status == 'available'
            )
        ).count()
        
        # –ó–∞–∫–∞–∑—á–∏–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        active_customers = self.db.query(CustomerProfile.id).join(
            RepairRequest, CustomerProfile.id == RepairRequest.customer_id
        ).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                RepairRequest.status.in_([
                    "manager_review",
                    "clarification",
                    "sent_to_contractors",
                    "contractor_responses",
                    "assigned",
                    "in_progress"
                ])
            )
        ).distinct().count()
        
        return {
            'total_requests': total_requests,
            'recent_requests': recent_requests,
            'today_requests': today_requests,
            'status_counts': status_counts,
            'avg_processing_time_hours': round(avg_processing_time, 1),
            'active_contractors': active_contractors,
            'active_customers': active_customers,
            'completion_rate': round(
                (status_counts.get("completed", 0) / total_requests * 100) 
                if total_requests > 0 else 0, 1
            )
        }
    
    def get_calendar_events(self, manager_id: int, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        
        events = []
        
        # –ó–∞—è–≤–∫–∏ —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        scheduled_requests = self.db.query(RepairRequest).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                RepairRequest.scheduled_date.isnot(None),
                RepairRequest.scheduled_date.between(start_date, end_date),
                RepairRequest.status.in_([
                    "assigned",
                    "in_progress"
                ])
            )
        ).all()
        
        for request in scheduled_requests:
            try:
                contractor_name = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                if request.assigned_contractor_id:
                    contractor = self.db.query(ContractorProfile).filter(
                        ContractorProfile.id == request.assigned_contractor_id
                    ).first()
                    if contractor:
                        contractor_name = f"{contractor.first_name or ''} {contractor.last_name or ''}".strip() or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                
                customer_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if request.customer_id:
                    customer = self.db.query(CustomerProfile).filter(
                        CustomerProfile.id == request.customer_id
                    ).first()
                    if customer:
                        customer_name = customer.company_name or customer.contact_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                events.append({
                    'id': f"request_{request.id}",
                    'title': request.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    'start': request.scheduled_date.isoformat() if request.scheduled_date else start_date.isoformat(),
                    'end': (request.scheduled_date + timedelta(hours=8)).isoformat() if request.scheduled_date else (start_date + timedelta(hours=8)).isoformat(),
                    'type': 'request',
                    'status': request.status or 'unknown',
                    'contractor_name': contractor_name,
                    'customer_name': customer_name,
                    'equipment_type': request.equipment_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'address': request.address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'color': self._get_status_color(request.status) if request.status else '#666666'
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {request.id} –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
                continue
        
        # –ó–∞—è–≤–∫–∏ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
        preferred_requests = self.db.query(RepairRequest).filter(
            and_(
                RepairRequest.manager_id == manager_id,
                RepairRequest.preferred_date.isnot(None),
                RepairRequest.preferred_date.between(start_date, end_date),
                RepairRequest.status.in_([
                    "manager_review",
                    "clarification",
                    "sent_to_contractors"
                ])
            )
        ).all()
        
        for request in preferred_requests:
            try:
                customer_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                if request.customer_id:
                    customer = self.db.query(CustomerProfile).filter(
                        CustomerProfile.id == request.customer_id
                    ).first()
                    if customer:
                        customer_name = customer.company_name or customer.contact_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                events.append({
                    'id': f"preferred_{request.id}",
                    'title': f"üìÖ {request.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}",
                    'start': request.preferred_date.isoformat() if request.preferred_date else start_date.isoformat(),
                    'end': (request.preferred_date + timedelta(hours=1)).isoformat() if request.preferred_date else (start_date + timedelta(hours=1)).isoformat(),
                    'type': 'preferred',
                    'status': request.status or 'unknown',
                    'customer_name': customer_name,
                'equipment_type': request.equipment_type,
                'address': request.address,
                'color': '#ff9800'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
            })
        
        return events
    
    def get_contractor_workload(self, manager_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        
        try:
            contractors = self.db.query(ContractorProfile).join(User, ContractorProfile.user_id == User.id).filter(
                and_(
                    User.role == 'contractor',
                    User.is_active == True
                )
            ).all()
            
            workload_data = []
            
            for contractor in contractors:
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                active_requests = self.db.query(RepairRequest).filter(
                    and_(
                        RepairRequest.assigned_contractor_id == contractor.user_id,
                        RepairRequest.status.in_([
                            "assigned",
                            "in_progress"
                        ])
                    )
                ).count()
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ –º–µ—Å—è—Ü
                month_ago = datetime.now(timezone.utc) - timedelta(days=30)
                completed_requests = self.db.query(RepairRequest).filter(
                    and_(
                        RepairRequest.assigned_contractor_id == contractor.user_id,
                        RepairRequest.status == "completed",
                        RepairRequest.assigned_at >= month_ago
                    )
                ).count()
                
                # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                avg_rating = 4.5
                
                workload_data.append({
                    'contractor_id': contractor.user_id,
                    'name': f"{contractor.first_name} {contractor.last_name}",
                    'specializations': contractor.specializations or [],
                    'active_requests': active_requests,
                    'completed_requests': completed_requests,
                    'avg_rating': avg_rating,
                    'availability_status': contractor.availability_status,
                    'hourly_rate': contractor.hourly_rate,
                    'workload_percentage': min(active_requests * 20, 100)  # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                })
            
            return sorted(workload_data, key=lambda x: x['workload_percentage'], reverse=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_recent_activity(self, manager_id: int, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        try:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫–∞—Ö
            recent_requests = self.db.query(RepairRequest).filter(
                RepairRequest.manager_id == manager_id
            ).order_by(RepairRequest.updated_at.desc()).limit(limit).all()
            
            activities = []
            
            for request in recent_requests:
                activity_type = self._get_activity_type(request)
                activities.append({
                    'id': request.id,
                    'type': activity_type,
                    'title': request.title,
                    'status': request.status,
                    'status_text': self._get_status_text(request.status),
                    'timestamp': request.updated_at.isoformat(),
                    'customer_name': request.customer.company_name if request.customer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'contractor_name': f"{request.assigned_contractor.first_name} {request.assigned_contractor.last_name}" 
                                     if request.assigned_contractor else None,
                    'icon': self._get_activity_icon(activity_type)
                })
            
            return activities
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return []
    
    def get_upcoming_deadlines(self, manager_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        
        try:
            # –ó–∞—è–≤–∫–∏ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            seven_days_later = datetime.now(timezone.utc) + timedelta(days=7)
            
            upcoming_requests = self.db.query(RepairRequest).filter(
                and_(
                    RepairRequest.manager_id == manager_id,
                    RepairRequest.preferred_date <= seven_days_later,
                    RepairRequest.preferred_date >= datetime.now(timezone.utc),
                    RepairRequest.status.in_([
                        "manager_review",
                        "clarification",
                        "sent_to_contractors"
                    ])
                )
            ).order_by(RepairRequest.preferred_date).all()
            
            deadlines = []
            
            for request in upcoming_requests:
                days_until = (request.preferred_date.date() - datetime.now(timezone.utc).date()).days
                
                deadlines.append({
                    'id': request.id,
                    'title': request.title,
                    'deadline': request.preferred_date.isoformat(),
                    'days_until': days_until,
                    'status': request.status,
                    'customer_name': request.customer.company_name if request.customer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'priority': request.priority or 'normal',
                    'urgency': 'high' if days_until <= 1 else 'medium' if days_until <= 3 else 'low'
                })
            
            return deadlines
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤: {e}")
            return []
    
    def _get_status_color(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        colors = {
            "new": '#2196f3',
            "manager_review": '#ff9800',
            "clarification": '#ff5722',
            "sent_to_contractors": '#9c27b0',
            "contractor_responses": '#673ab7',
            "assigned": '#4caf50',
            "in_progress": '#00bcd4',
            "completed": '#8bc34a',
            "cancelled": '#f44336'
        }
        return colors.get(status, '#757575')
    
    def _get_status_text(self, status: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        texts = {
            "new": '–ù–æ–≤–∞—è',
            "manager_review": '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            "clarification": '–£—Ç–æ—á–Ω–µ–Ω–∏–µ',
            "sent_to_contractors": '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º',
            "contractor_responses": '–û—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã',
            "assigned": '–ù–∞–∑–Ω–∞—á–µ–Ω–∞',
            "in_progress": '–í —Ä–∞–±–æ—Ç–µ',
            "completed": '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            "cancelled": '–û—Ç–º–µ–Ω–µ–Ω–∞'
        }
        return texts.get(status, status)
    
    def _get_activity_type(self, request: RepairRequest) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if request.status == "completed":
            return 'completed'
        elif request.status == "in_progress":
            return 'in_progress'
        elif request.status == "assigned":
            return 'assigned'
        elif request.status == "sent_to_contractors":
            return 'sent_to_contractors'
        elif request.status == "clarification":
            return 'clarification'
        else:
            return 'updated'
    
    def _get_activity_icon(self, activity_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        icons = {
            'completed': '‚úÖ',
            'in_progress': 'üîÑ',
            'assigned': 'üë§',
            'sent_to_contractors': 'üì§',
            'clarification': '‚ùì',
            'updated': 'üìù'
        }
        return icons.get(activity_type, 'üìù')

def get_manager_dashboard_service(db: Session) -> ManagerDashboardService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–∞—à–±–æ—Ä–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    return ManagerDashboardService(db)
