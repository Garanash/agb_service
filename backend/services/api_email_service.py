"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API
"""
import os
import logging
import requests
import json
from typing import Optional

logger = logging.getLogger(__name__)

class APIEmailService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã —á–µ—Ä–µ–∑ API"""
        self.from_email = os.getenv("MAIL_FROM", "almazgeobur@mail.ru")
        self.from_name = os.getenv("MAIL_FROM_NAME", "AGB SERVICE")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤
        self.services = {
            'sendgrid': {
                'url': 'https://api.sendgrid.com/v3/mail/send',
                'headers': {
                    'Authorization': f'Bearer {os.getenv("SENDGRID_API_KEY", "")}',
                    'Content-Type': 'application/json'
                }
            },
            'mailgun': {
                'url': f'https://api.mailgun.net/v3/{os.getenv("MAILGUN_DOMAIN", "")}/messages',
                'auth': ('api', os.getenv("MAILGUN_API_KEY", "")),
                'headers': {}
            },
            'resend': {
                'url': 'https://api.resend.com/emails',
                'headers': {
                    'Authorization': f'Bearer {os.getenv("RESEND_API_KEY", "")}',
                    'Content-Type': 'application/json'
                }
            }
        }

    def _send_via_sendgrid(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SendGrid API"""
        try:
            data = {
                "personalizations": [
                    {
                        "to": [{"email": to_email}],
                        "subject": subject
                    }
                ],
                "from": {
                    "email": self.from_email,
                    "name": self.from_name
                },
                "content": [
                    {
                        "type": "text/html",
                        "value": html_content
                    }
                ]
            }
            
            if plain_text:
                data["content"].append({
                    "type": "text/plain",
                    "value": plain_text
                })
            
            response = requests.post(
                self.services['sendgrid']['url'],
                headers=self.services['sendgrid']['headers'],
                json=data,
                timeout=10
            )
            
            if response.status_code == 202:
                logger.info(f"‚úÖ SendGrid: –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå SendGrid: –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå SendGrid: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {to_email}: {e}")
            return False

    def _send_via_mailgun(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Mailgun API"""
        try:
            data = {
                'from': f'{self.from_name} <{self.from_email}>',
                'to': to_email,
                'subject': subject,
                'html': html_content
            }
            
            if plain_text:
                data['text'] = plain_text
            
            response = requests.post(
                self.services['mailgun']['url'],
                auth=self.services['mailgun']['auth'],
                data=data,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Mailgun: –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå Mailgun: –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Mailgun: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {to_email}: {e}")
            return False

    def _send_via_resend(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Resend API"""
        try:
            data = {
                'from': f'{self.from_name} <{self.from_email}>',
                'to': [to_email],
                'subject': subject,
                'html': html_content
            }
            
            if plain_text:
                data['text'] = plain_text
            
            response = requests.post(
                self.services['resend']['url'],
                headers=self.services['resend']['headers'],
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Resend: –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
                return True
            else:
                logger.error(f"‚ùå Resend: –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Resend: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {to_email}: {e}")
            return False

    def _send_via_simple_api(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API –∏–ª–∏ —Å–µ—Ä–≤–∏—Å
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            email_data = {
                'to': to_email,
                'subject': subject,
                'html': html_content,
                'text': plain_text or html_content,
                'from': self.from_email,
                'from_name': self.from_name
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞:")
            logger.info(f"   –ö–æ–º—É: {to_email}")
            logger.info(f"   –¢–µ–º–∞: {subject}")
            logger.info(f"   –û—Ç: {self.from_name} <{self.from_email}>")
            logger.info(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {plain_text[:100]}..." if plain_text else f"   HTML: {html_content[:100]}...")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {to_email}")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {to_email}: {e}")
            return False

    def send_email(self, to_email: str, subject: str, html_content: str, plain_text: str = None) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–π API"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –∏ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        if os.getenv("SENDGRID_API_KEY"):
            if self._send_via_sendgrid(to_email, subject, html_content, plain_text):
                return True
        
        if os.getenv("MAILGUN_API_KEY") and os.getenv("MAILGUN_DOMAIN"):
            if self._send_via_mailgun(to_email, subject, html_content, plain_text):
                return True
        
        if os.getenv("RESEND_API_KEY"):
            if self._send_via_resend(to_email, subject, html_content, plain_text):
                return True
        
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º")
        return self._send_via_simple_api(to_email, subject, html_content, plain_text)

    async def send_welcome_email(self, user_email: str, user_name: str, user_role: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            role_text = {
                "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "customer": "–ó–∞–∫–∞–∑—á–∏–∫", 
                "contractor": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                "service_engineer": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            }.get(user_role, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            # HTML —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
                    .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}
                    .logo {{ font-size: 24px; font-weight: bold; margin-bottom: 10px; }}
                    .welcome-text {{ font-size: 18px; margin-bottom: 20px; }}
                    .user-info {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea; }}
                    .footer {{ text-align: center; margin-top: 30px; color: #666; font-size: 14px; }}
                    .button {{ display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <div class="logo">AGB SERVICE</div>
                        <div>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!</div>
                    </div>
                    <div class="content">
                        <div class="welcome-text">
                            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!
                        </div>
                        
                        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ AGB SERVICE! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.</p>
                        
                        <div class="user-info">
                            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:</h3>
                            <p><strong>Email:</strong> {user_email}</p>
                            <p><strong>–†–æ–ª—å:</strong> {role_text}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω—ã–π</p>
                        </div>
                        
                        <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                        <ul>
                            {"<li>–°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏</li><li>–ù–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</li><li>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫</li>" if user_role == 'customer' else "<li>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏</li><li>–û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</li><li>–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º</li>" if user_role in ['contractor', 'service_engineer'] else ""}
                        </ul>
                        
                        <div style="text-align: center;">
                            <a href="http://91.222.236.58:3000/login" class="button">–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</a>
                        </div>
                        
                        <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
                        
                        <div class="footer">
                            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ AGB SERVICE</p>
                            <p>¬© 2025 Neurofork. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                        </div>
                    </div>
                </div>
            </body>
            </html>
            """

            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            plain_text = f"""
AGB SERVICE
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ AGB SERVICE! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:
Email: {user_email}
–†–æ–ª—å: {role_text}
–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ –∞–¥—Ä–µ—Å—É: http://91.222.236.58:3000/login
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ AGB SERVICE
¬© 2025 Neurofork. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
            """

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            success = self.send_email(
                to_email=user_email,
                subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AGB SERVICE!",
                html_content=html_content,
                plain_text=plain_text
            )
            
            if success:
                logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}")
            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ {user_email}: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
api_email_service = APIEmailService()
