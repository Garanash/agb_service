"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import logging
import os
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone
import aiohttp
from sqlalchemy.orm import Session
from sqlalchemy import and_
from models import (
    RepairRequest, ContractorProfile, User, SecurityVerification
)

logger = logging.getLogger(__name__)

class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self, db: Session):
        self.db = db
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = os.getenv("TELEGRAM_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not self.chat_id:
            logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_request_to_contractors(self, request_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –≤ Telegram —á–∞—Ç"""
        if not self.bot_token or not self.chat_id:
            logger.error("‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            request = self.db.query(RepairRequest).filter(RepairRequest.id == request_id).first()
            if not request:
                logger.error(f"‚ùå –ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message = self._format_request_message(request)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            success = await self._send_message(self.chat_id, message)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
                request.sent_to_bot_at = datetime.now(timezone.utc)
                self.db.commit()
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram —á–∞—Ç")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –≤ Telegram —á–∞—Ç")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ {request_id} –≤ Telegram: {e}")
            return False
    
    async def send_notification_to_contractor(
        self, 
        contractor_id: int, 
        message: str, 
        request_id: Optional[int] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
        if not self.bot_token or self.bot_token == "dummy_token_for_testing":
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
            contractor = self.db.query(ContractorProfile).filter(
                ContractorProfile.id == contractor_id
            ).first()
            
            if not contractor or not contractor.telegram_username:
                logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {contractor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            success = await self._send_message_to_user(contractor.telegram_username, message)
            
            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {contractor_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {contractor_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {contractor_id}: {e}")
            return False
    
    async def send_request_assignment_notification(
        self, 
        contractor_id: int, 
        request_id: int
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞—è–≤–∫—É"""
        try:
            request = self.db.query(RepairRequest).filter(RepairRequest.id == request_id).first()
            if not request:
                return False
            
            message = f"""
üéØ **–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!**

üìã **–ó–∞—è–≤–∫–∞ #{request_id}**
üîß **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {request.equipment_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞:** {request.preferred_date.strftime('%d.%m.%Y %H:%M') if request.preferred_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{request.description}

üí¨ **–£—Ç–æ—á–Ω–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:**
{request.clarification_details or '–ù–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π'}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
"""
            
            return await self.send_notification_to_contractor(contractor_id, message, request_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏: {e}")
            return False
    
    async def send_request_status_update(
        self, 
        contractor_id: int, 
        request_id: int, 
        status: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        try:
            request = self.db.query(RepairRequest).filter(RepairRequest.id == request_id).first()
            if not request:
                return False
            
            status_texts = {
                'assigned': '–Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
                'in_progress': '–≤ —Ä–∞–±–æ—Ç–µ',
                'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω–∞'
            }
            
            status_text = status_texts.get(status, status)
            
            message = f"""
üì¢ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏**

üìã **–ó–∞—è–≤–∫–∞ #{request_id}** - —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **{status_text}**

üîß **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {request.equipment_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

{'‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' if status == 'completed' else ''}
{'‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' if status == 'cancelled' else ''}
"""
            
            return await self.send_notification_to_contractor(contractor_id, message, request_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    async def get_verified_contractors_for_notifications(self) -> List[ContractorProfile]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å Telegram username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        verified_contractors = self.db.query(ContractorProfile).join(SecurityVerification).filter(
            and_(
                SecurityVerification.verification_status == "approved",
                ContractorProfile.telegram_username.isnot(None),
                ContractorProfile.telegram_username != ""
            )
        ).all()
        
        return verified_contractors
    
    async def send_bulk_notification_to_contractors(
        self, 
        message: str, 
        contractor_ids: Optional[List[int]] = None
    ) -> Dict[str, Any]:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"""
        if not self.bot_token:
            return {"success": False, "error": "Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        try:
            if contractor_ids:
                contractors = self.db.query(ContractorProfile).filter(
                    ContractorProfile.id.in_(contractor_ids)
                ).all()
            else:
                contractors = await self.get_verified_contractors_for_notifications()
            
            results = {
                "total": len(contractors),
                "successful": 0,
                "failed": 0,
                "errors": []
            }
            
            for contractor in contractors:
                if contractor.telegram_username:
                    success = await self._send_message_to_user(contractor.telegram_username, message)
                    if success:
                        results["successful"] += 1
                    else:
                        results["failed"] += 1
                        results["errors"].append(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {contractor.id}: {contractor.telegram_username}")
                else:
                    results["failed"] += 1
                    results["errors"].append(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {contractor.id}: –Ω–µ—Ç Telegram username")
            
            logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results['successful']}/{results['total']} —É—Å–ø–µ—à–Ω–æ")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return {"success": False, "error": str(e)}
    
    def _format_request_message(self, request: RepairRequest) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç"""
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        message = f"""
üîß **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –°–ï–†–í–ò–°**

üìã **–ó–∞—è–≤–∫–∞ #{request.id}**
üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** [–°–∫—Ä—ã—Ç–æ]
üîß **–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:** {request.equipment_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üè≠ **–ë—Ä–µ–Ω–¥:** {request.equipment_brand or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {request.address or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üåç **–†–µ–≥–∏–æ–Ω:** {request.region or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:**
{request.problem_description or request.description}

‚è∞ **–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞:** {request.preferred_date.strftime('%d.%m.%Y %H:%M') if request.preferred_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚ö° **–°—Ä–æ—á–Ω–æ—Å—Ç—å:** {self._get_urgency_text(request.urgency)}
üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {self._get_priority_text(request.priority)}

üí¨ **–£—Ç–æ—á–Ω–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:**
{request.clarification_details or '–ù–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π'}

üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** [–£—Ç–æ—á–Ω—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º]

---
üë• **–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏**
üìû **–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É**
"""
        return message
    
    def _get_urgency_text(self, urgency: Optional[str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
        urgency_texts = {
            'low': '–ù–∏–∑–∫–∞—è',
            'medium': '–°—Ä–µ–¥–Ω—è—è', 
            'high': '–í—ã—Å–æ–∫–∞—è',
            'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'
        }
        return urgency_texts.get(urgency, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    def _get_priority_text(self, priority: Optional[str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        priority_texts = {
            'low': '–ù–∏–∑–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'urgent': '–°—Ä–æ—á–Ω—ã–π'
        }
        return priority_texts.get(priority, '–û–±—ã—á–Ω—ã–π')
    
    async def _send_message(self, chat_id: str, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "Markdown"
                }
                
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram: {e}")
            return False
    
    async def _send_message_to_user(self, username: str, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ username"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = await self._get_user_chat_id(username)
            if not chat_id:
                return False
            
            return await self._send_message(chat_id, text)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")
            return False
    
    async def _get_user_chat_id(self, username: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/getUpdates"
                
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
                        for update in data.get("result", []):
                            if "message" in update:
                                message = update["message"]
                                if "from" in message:
                                    user = message["from"]
                                    if user.get("username") == username.replace("@", ""):
                                        return str(user["id"])
                        
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞")
                        return None
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.status}")
                        return None
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –¥–ª—è {username}: {e}")
            return None
    
    async def test_bot_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –±–æ—Ç—É"""
        if not self.bot_token:
            return {"success": False, "error": "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/getMe"
                
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        bot_info = data.get("result", {})
                        return {
                            "success": True,
                            "bot_info": {
                                "id": bot_info.get("id"),
                                "username": bot_info.get("username"),
                                "first_name": bot_info.get("first_name"),
                                "can_join_groups": bot_info.get("can_join_groups"),
                                "can_read_all_group_messages": bot_info.get("can_read_all_group_messages")
                            }
                        }
                    else:
                        error_text = await response.text()
                        return {"success": False, "error": f"–û—à–∏–±–∫–∞ API: {error_text}"}
                        
        except Exception as e:
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"}

def get_telegram_bot_service(db: Session) -> TelegramBotService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞"""
    return TelegramBotService(db)
