"""
Consumer –¥–ª—è Notification Service
"""
import logging
import asyncio
from typing import Dict, Any
from sqlalchemy.orm import Session
from kafka.kafka_consumer import KafkaEventConsumer
from kafka.kafka_events import EventType, RequestCreatedEvent, WorkflowContractorAssignedEvent
from services.telegram_bot_service import TelegramBotService

logger = logging.getLogger(__name__)

class NotificationServiceConsumer:
    """Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, db: Session):
        self.db = db
        self.telegram_service = TelegramBotService(db)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º consumer
        self.consumer = KafkaEventConsumer(
            group_id="notification-service",
            topics=["request-events", "workflow-events"]
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        self.consumer.register_handler(
            EventType.REQUEST_CREATED,
            self._handle_request_created
        )
        
        self.consumer.register_handler(
            EventType.WORKFLOW_CONTRACTOR_ASSIGNED,
            self._handle_contractor_assigned
        )
    
    def _handle_request_created(self, event_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            event = RequestCreatedEvent(**event_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
            asyncio.create_task(self._send_customer_confirmation(event))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            asyncio.create_task(self._notify_managers(event))
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def _handle_contractor_assigned(self, event_data: Dict[str, Any]) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            event = WorkflowContractorAssignedEvent(**event_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            asyncio.create_task(self._notify_contractor(event))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
            asyncio.create_task(self._notify_customer(event))
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
            return False
    
    async def _send_customer_confirmation(self, event: RequestCreatedEvent):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
            from models import CustomerProfile, User
            
            customer_profile = self.db.query(CustomerProfile).filter(
                CustomerProfile.id == event.customer_id
            ).first()
            
            if customer_profile and customer_profile.user.email:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await self._send_email_confirmation(
                    email=customer_profile.user.email,
                    request_id=event.request_id,
                    title=event.title
                )
                
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É {event.customer_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: {e}")
    
    async def _notify_managers(self, event: RequestCreatedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            from models import User
            
            managers = self.db.query(User).filter(User.role == "manager").all()
            
            for manager in managers:
                if manager.email:
                    await self._send_email_notification(
                        email=manager.email,
                        subject=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{event.request_id}",
                        message=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {event.title}\n–°—Ä–æ—á–Ω–æ—Å—Ç—å: {event.urgency}\n–†–µ–≥–∏–æ–Ω: {event.region}"
                    )
            
            logger.info(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ #{event.request_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
    
    async def _notify_contractor(self, event: WorkflowContractorAssignedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            success = await self.telegram_service.send_request_assignment_notification(
                contractor_id=event.contractor_id,
                request_id=event.request_id
            )
            
            if success:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {event.contractor_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {event.contractor_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
    
    async def _notify_customer(self, event: WorkflowContractorAssignedEvent):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            from models import RepairRequest
            
            request = self.db.query(RepairRequest).filter(
                RepairRequest.id == event.request_id
            ).first()
            
            if request and request.customer.user.email:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∑–∞–∫–∞–∑—á–∏–∫—É
                await self._send_email_notification(
                    email=request.customer.user.email,
                    subject=f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É #{event.request_id}",
                    message=f"–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
                
                logger.info(f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{event.request_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {e}")
    
    async def _send_email_confirmation(self, email: str, request_id: int, title: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}: {title}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
    
    async def _send_email_notification(self, email: str, subject: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}: {subject}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ consumer"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Notification Service Consumer")
        self.consumer.start_consuming()
