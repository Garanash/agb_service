"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
"""

import os
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timezone, timedelta
import random

# Add the backend directory to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__))))

from database import Base, get_db
from models import User, RepairRequest, CustomerProfile, ContractorProfile, ContractorResponse

# Database setup
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/agregator_db")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def create_test_requests():
    db = next(get_db_session())
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    customers = db.query(CustomerProfile).join(User, CustomerProfile.user_id == User.id).filter(User.role == 'customer').all()
    if not customers:
        print("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    contractors = db.query(ContractorProfile).join(User, ContractorProfile.user_id == User.id).filter(User.role == 'contractor').all()
    if not contractors:
        print("‚ùå –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: {len(customers)}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {len(contractors)}")
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    existing_requests = db.query(RepairRequest).filter(RepairRequest.title.like('–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞%')).all()
    for request in existing_requests:
        db.delete(request)
    db.commit()
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {len(existing_requests)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
    test_requests_data = [
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –†–µ–º–æ–Ω—Ç –±—É—Ä–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
            "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–º–æ–Ω—Ç –±—É—Ä–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ ‚Ññ1. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –≤ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ.",
            "equipment_type": "–ë—É—Ä–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞",
            "urgency": "high",
            "status": "pending",
            "address": "–£—á–∞—Å—Ç–æ–∫ ‚Ññ1, –≥. –ú–æ—Å–∫–≤–∞",
            "city": "–ú–æ—Å–∫–≤–∞",
            "region": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "estimated_cost": 150000.0,
        },
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "description": "–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º.",
            "equipment_type": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "urgency": "medium",
            "status": "in_progress",
            "address": "–°–∫–ª–∞–¥ ‚Ññ2, –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "region": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "estimated_cost": 75000.0,
        },
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–º–æ–Ω—Ç",
            "description": "–°—Ä–æ—á–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –Ω–∞—Å–æ—Å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.",
            "equipment_type": "–ù–∞—Å–æ—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "urgency": "urgent",
            "status": "completed",
            "address": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Ññ3, –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            "city": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
            "region": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "estimated_cost": 200000.0,
        },
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã",
            "description": "–ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.",
            "equipment_type": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "urgency": "low",
            "status": "pending",
            "address": "–¶–µ—Ö ‚Ññ4, –≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "city": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
            "region": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "estimated_cost": 300000.0,
        },
        {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç–µ. –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.",
            "equipment_type": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "urgency": "medium",
            "status": "in_progress",
            "address": "–û–±—ä–µ–∫—Ç ‚Ññ5, –≥. –ö–∞–∑–∞–Ω—å",
            "city": "–ö–∞–∑–∞–Ω—å",
            "region": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
            "estimated_cost": 120000.0,
        },
    ]
    
    created_requests = []
    
    for i, request_data in enumerate(test_requests_data):
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
        customer = random.choice(customers)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        new_request = RepairRequest(
            title=request_data["title"],
            description=request_data["description"],
            customer_id=customer.id,
            urgency=request_data["urgency"],
            address=request_data["address"],
            city=request_data["city"],
            region=request_data["region"],
            equipment_type=request_data["equipment_type"],
            priority=request_data["urgency"],
            estimated_cost=request_data["estimated_cost"],
            created_at=datetime.now(timezone.utc) - timedelta(days=random.randint(1, 30)),
            updated_at=datetime.now(timezone.utc) - timedelta(days=random.randint(0, 5)),
        )
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã
        if request_data["status"] in ["in_progress", "completed"]:
            new_request.assigned_at = new_request.created_at + timedelta(days=random.randint(1, 3))
        
        if request_data["status"] == "completed":
            new_request.processed_at = new_request.assigned_at + timedelta(days=random.randint(1, 7))
        
        db.add(new_request)
        db.commit()
        db.refresh(new_request)
        created_requests.append(new_request)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {new_request.title}")
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        if request_data["status"] in ["in_progress", "completed"]:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            contractor = random.choice(contractors)
            
            response = ContractorResponse(
                request_id=new_request.id,
                contractor_id=contractor.id,
                proposed_price=int(request_data["estimated_cost"] * random.uniform(0.8, 1.2)),
                estimated_time=f"{random.randint(1, 14)} –¥–Ω–µ–π",
                comment=f"–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ '{new_request.title}'. –ò–º–µ—é –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.",
                is_accepted=True,
                created_at=new_request.created_at + timedelta(hours=random.randint(1, 24)),
            )
            
            db.add(response)
            db.commit()
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –∑–∞—è–≤–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ contractor_profile)
            new_request.assigned_contractor_id = contractor.user_id
            db.commit()
            
            print(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {contractor.first_name} {contractor.last_name}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: {len(created_requests)}")
    print("üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:")
    for request in created_requests:
        print(f"  - {request.title} ({request.status}) - {request.priority}")
    
    db.close()

if __name__ == "__main__":
    create_test_requests()
