"""
Kafka Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
"""
import json
import logging
import signal
import sys
from typing import Dict, Any, Callable, Optional
from kafka import KafkaConsumer
from kafka.errors import KafkaError
from .kafka_config import kafka_config
from .kafka_events import BaseEvent, EventType

logger = logging.getLogger(__name__)

class KafkaEventConsumer:
    """Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Kafka"""
    
    def __init__(self, group_id: str, topics: list):
        self.group_id = group_id
        self.topics = topics
        self.consumer = None
        self.event_handlers: Dict[EventType, Callable] = {}
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _initialize_consumer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer"""
        try:
            consumer_config = {
                'bootstrap_servers': kafka_config.bootstrap_servers.split(','),
                'group_id': self.group_id,
                'auto_offset_reset': kafka_config.consumer_auto_offset_reset,
                'enable_auto_commit': kafka_config.consumer_enable_auto_commit,
                'auto_commit_interval_ms': kafka_config.consumer_auto_commit_interval_ms,
                'max_poll_records': kafka_config.consumer_max_poll_records,
                'value_deserializer': lambda m: json.loads(m.decode('utf-8')),
                'key_deserializer': lambda m: m.decode('utf-8') if m else None,
                'session_timeout_ms': 30000,
                'heartbeat_interval_ms': 10000,
                'max_poll_interval_ms': 300000,
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if kafka_config.security_protocol != "PLAINTEXT":
                consumer_config.update({
                    'security_protocol': kafka_config.security_protocol,
                    'sasl_mechanism': kafka_config.sasl_mechanism,
                    'sasl_plain_username': kafka_config.sasl_username,
                    'sasl_plain_password': kafka_config.sasl_password,
                })
            
            self.consumer = KafkaConsumer(**consumer_config)
            self.consumer.subscribe(self.topics)
            
            logger.info(f"‚úÖ Kafka Consumer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤: {self.topics}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Kafka Consumer: {e}")
            raise
    
    def register_handler(self, event_type: EventType, handler: Callable):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        self.event_handlers[event_type] = handler
        logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: {event_type}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
    
    def _process_message(self, message) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
            event_data = message.value
            event_type = EventType(event_data.get('event_type'))
            
            logger.info(
                f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type} –∏–∑ —Ç–æ–ø–∏–∫–∞ {message.topic}, "
                f"–ø–∞—Ä—Ç–∏—Ü–∏—è {message.partition}, offset {message.offset}"
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handler = self.event_handlers.get(event_type)
            if not handler:
                logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            success = handler(event_data)
            
            if success:
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_type} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event_type}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def start_consuming(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.consumer:
            self._initialize_consumer()
        
        self.running = True
        logger.info(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–æ–≤: {self.topics}")
        
        try:
            while self.running:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                message_batch = self.consumer.poll(timeout_ms=1000)
                
                if not message_batch:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for topic_partition, messages in message_batch.items():
                    for message in messages:
                        if not self.running:
                            break
                        
                        success = self._process_message(message)
                        
                        if not success:
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è Dead Letter Queue
                            logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DLQ")
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è: {e}")
        finally:
            self.stop_consuming()
    
    def stop_consuming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.running = False
        if self.consumer:
            self.consumer.close()
            logger.info("üîí Kafka Consumer –∑–∞–∫—Ä—ã—Ç")
